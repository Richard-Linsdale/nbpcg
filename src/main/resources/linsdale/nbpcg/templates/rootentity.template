/*
 * Copyright (C) 2014 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
<#-- Freemarker Template for Root entity class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign hassortchildren = false>
<#list ENTITYINFO.child as child>
<#assign hassortchildren = hassortchildren | child.sort?? >
<#assign haschildren = true >
</#list>
package ${package};

import java.util.Collections;
<#if hassortchildren >
import java.util.Comparator;
</#if>
import java.util.List;
<#if hassortchildren >
import ${nodepackage}.*;
</#if>
import linsdale.nbpcg.datasupportlib.entity.*;
import linsdale.nbpcg.datasupportlib.entityreferences.*;
import linsdale.nbpcg.supportlib.IntWithDescription;
<#if haschildren >
import linsdale.nbpcg.supportlib.Listener;
</#if>
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;

/**
 * The ${ENTITYINFO.name} Object
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}. 
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@ServiceProvider(service = ${ENTITYINFO.name}.class)
public class ${ENTITYINFO.name} extends Entity {

    public static ${ENTITYINFO.name} getRoot() {
        return Lookup.getDefault().lookup(${ENTITYINFO.name}.class);
    }

<#if haschildren >
    private final ChildListener childListener;
</#if>
<#assign idx = 10 >
<#list ENTITYINFO.child![] as child>
    public static final IntWithDescription ${child.name?upper_case}SFIELD = new IntWithDescription(${idx}, "${child.name?cap_first}s");
<#assign idx = idx + 1>
<#if child.orderable??>
    private final EntityIndexedReferenceSet<${child.references}> ${child.name}s;
<#elseif child.sort??>
    private final EntitySortedReferenceSet<${child.references}> ${child.name}s;
<#else>
    private final EntityReferenceSet<${child.references}> ${child.name}s;
</#if>
</#list>
    
    public ${ENTITYINFO.name}() {
        super("${ENTITYINFO.name}");
<#if haschildren >
        childListener = new ChildListener("${ENTITYINFO.name}/childset");
</#if>
<#list ENTITYINFO.child![] as child>
<#if child.orderable??>
        ${child.name}s = new EntityIndexedReferenceSet<>("${child.name}s", ${child.name?upper_case}SFIELD, ${child.references}.EM.class);
<#elseif child.sort??>
        ${child.name}s = new EntitySortedReferenceSet<>("${child.name?cap_first}s", ${child.name?upper_case}SFIELD, new ${child.references}Comparator(), ${child.references}.EM.class);
<#else>
        ${child.name}s = new EntityReferenceSet<>("${child.name?cap_first}s", ${child.name?upper_case}SFIELD, ${child.references}.EM.class);
</#if>
        ${child.name}s.addSetListener(childListener);
</#list>
    }
<#list ENTITYINFO.child![] as child>

    /**
     * Add a ${child.references} to the root's list
     *
     * @param e the ${child.name}
     */
    public void add${child.references}(${child.references} e) {
        ${child.name}s.add(e);
    }

    /**
     * Remove a ${child.references} from the root's list
     *
     * @param e the ${child.references}
     */
    public void remove${child.references}(${child.references} e) {
        ${child.name}s.remove(e);
    }

    protected void removeInternal${child.references}(${child.references} e) {
        ${child.name}s.remove(e);
    }

    /**
     * Get the list of ${child.references}s
     *
     * @return the list of ${child.references}s
     */
    public List<${child.references}> get${child.references}s() { 
        return ${child.name}s.get();
    }
<#if child.orderable??>

   /**
     * Reorder the list of ${child.references}s
     *
     * @param perm the reordered index information
     */
    public void reorder${child.name?cap_first}s(int[] perm, int offsetMin, int offsetMax) {
        ${child.name}s.reorder(perm, offsetMin, offsetMax);
<#if entityinfo[child.references].ordercolumn?? >
        ${child.name}s.persistReorder();
</#if>
    }
</#if>
</#list>

        @Override
        protected final void _restoreState() {
<#list ENTITYINFO.child![] as child>
            ${child.name}s.restoreState();
</#list>
        }
<#list ENTITYINFO.child![] as child>
<#if child.sort??>

    private class ${child.references}Comparator implements Comparator<${child.references}> {
        @Override
        public int compare(${child.references} o1, ${child.references} o2) {
            return ${ENTITYINFO.name}NodeChildFactory.${child.references}NodeDisplay.getSort(o1,"undefined").compareTo(${ENTITYINFO.name}NodeChildFactory.${child.references}NodeDisplay.getSort(o2,"undefined"));
        }
    }
</#if>
</#list>
<#if haschildren >

    private class ChildListener extends Listener<SetChangeListenerParams> {

        public ChildListener(String name) {
            super(name);
        }

        @Override
        public void action(SetChangeListenerParams p) {
            fireSetChange(p);
        }
    }
</#if>

    public static List<${ENTITYINFO.name}> getAll${ENTITYINFO.name}s() {
        return Collections.singletonList(getRoot());
    }
}