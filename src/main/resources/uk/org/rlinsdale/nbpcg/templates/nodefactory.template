<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for ChildFactory class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign NODEINFO = nodeinfo[usenodeinfo] >
<#if type = "Icon" >
<#assign type2 = "Icon" />
<#else>
<#assign type2 = "Tree" />
</#if>
package ${package};

import java.util.List;
import  ${datapackage}.*;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.node.nodes.*;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import org.openide.nodes.Node;

/**
 * ${type}NodeChildFactory from ${NODEINFO.name}.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
<#if NODEINFO.isroot??>
public class ${NODEINFO.name}ChildFactory extends RootChildFactory<${NODEINFO.entity}> {
<#else>
public class ${NODEINFO.name}ChildFactory extends BasicChildFactory<${NODEINFO.entity}> {
</#if>

<#list NODEINFO.child![] as child>
    private int offsetMin${child.entity}s;
    private int offsetMax${child.entity}s;
</#list>

<#if NODEINFO.isroot??>
    public ${NODEINFO.name}ChildFactory(${NODEINFO.entity} parent) {
        super(parent);
        Listener<SetChangeEventParams> listener = getSetChangeListener("Node.${NODEINFO.entity}>*");
<#list NODEINFO.child![] as child >
        parent.add${child.entity}SetChangeListener(listener);
</#list>
    }   

<#else>
    public ${NODEINFO.name}ChildFactory(${NODEINFO.entity} parent) {
        super("${NODEINFO.name}", parent, ${NODEINFO.entity}.EM.class);
        Listener<SetChangeEventParams> listener = getSetChangeListener("Node.${NODEINFO.entity}>*");
<#list NODEINFO.child![] as child >
        parent.add${child.entity}SetChangeListener(listener);
</#list>
    }  

</#if>
    /**
     * Create the list of Child Entities
     *
     * @param list the list into which child entities are to be added
     * @return true
     */
    @Override
    protected boolean createKeys(List<Entity> list) {
<#assign previous = "" >
<#list NODEINFO.child![] as child>
<#if previous = "" >
        offsetMin${child.entity}s = 0; 
<#else>
        offsetMin${child.entity}s = ${previous} + 1;
</#if>
        List<${child.entity}> ${child.entity?uncap_first}s = getParentEntity().get${child.entity}s();
        list.addAll(${child.entity?uncap_first}s);
        offsetMax${child.entity}s = offsetMin${child.entity}s + ${child.entity?uncap_first}s.size() -1;
<#assign previous = "offsetMax${child.entity}s" >
</#list>
        return true;
    }

    /**
     * Create a Child Node from a given Child Entity
     *
     * @param e the Child Entity
     * @return the Child Node
     */
    @Override
    protected Node createNodeForKey(Entity e) {
<#list NODEINFO.child![] as child>
        if (e instanceof ${child.entity}) {
            return new ${child.name}((${child.entity}) e);
        }
</#list>
        throw new LogicException("${NODEINFO.name}ChildFactory.createNodeforKey(..) was given an unsupported entity class");
    }
<#list NODEINFO.child![] as child>

    public final int getOffsetMin${child.entity}s() {
        return offsetMin${child.entity}s;
    }
    
    public final int getOffsetMax${child.entity}s() {
        return offsetMax${child.entity}s;
    }
</#list>
}