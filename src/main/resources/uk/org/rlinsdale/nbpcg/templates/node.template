<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for ChildFactory class plus an inner classes for Nodes. -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#if type = "Icon" >
<#assign type2 = "Icon" />
<#else>
<#assign type2 = "Tree" />
</#if>
package ${package};

import java.awt.datatransfer.DataFlavor;
import java.io.IOException;
import java.util.List;
import javax.swing.Action;
import ${datapackage}.*;
import uk.org.rlinsdale.nbpcglibrary.annotations.UseCommonNodeAction;
import uk.org.rlinsdale.nbpcglibrary.annotations.UseCommonNodeActions;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.node.nodes.*;
import uk.org.rlinsdale.nbpcglibrary.node.properties.*;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import org.openide.nodes.PropertySupport;
import ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field;
<#list ENTITYINFO.child![] as c>
import static ${nodepackage}.${c.name?cap_first}Node.${c.name?upper_case}NODE_FLAVOR;
<#if c.copymovenode??>
<#assign COPYMOVEENTITYINFO = entityinfo[c.copymoveentity] >
import static ${nodepackage}.${COPYMOVEENTITYINFO.name}Node.${COPYMOVEENTITYINFO.name?upper_case}NODE_FLAVOR;
</#if>
</#list>
import uk.org.rlinsdale.nbpcglibrary.data.entity.EntityFieldChangeEventParams.CommonEntityField;
import static uk.org.rlinsdale.nbpcglibrary.data.entity.EntityFieldChangeEventParams.CommonEntityField.*;

/**
 * Node for ${ENTITYINFO.name}Node.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name}Node extends ${type2}Node${ENTITYINFO.access?upper_case}<${ENTITYINFO.name}, ${ENTITYINFO.name}Field> {

    public static final DataFlavor ${ENTITYINFO.name?upper_case}NODE_FLAVOR = new DataFlavor(${ENTITYINFO.name}Node.class, "${ENTITYINFO.name}Node");

<#assign haschildren = false>
<#assign haseditablechildren = false>
<#list ENTITYINFO.child![] as c>
<#assign haschildren = true >
<#assign haseditablechildren = haseditablechildren | (c.access = "rw") >
</#list>
<#if haschildren >

        private final ${ENTITYINFO.name}NodeChildFactory cf;

        /**
         * Constructor
         *
         * @param e the entity associated with this node
         */
        public ${ENTITYINFO.name}Node(${ENTITYINFO.name} e) {
            this(e, new ${ENTITYINFO.name}NodeChildFactory(e));
        }

        private ${ENTITYINFO.name}Node(${ENTITYINFO.name} e, ${ENTITYINFO.name}NodeChildFactory cf) {
            super("${ENTITYINFO.name}Node", e, cf, ${ENTITYINFO.name}.EM.class,
                new DataFlavorAndAction[] {
<#list ENTITYINFO.child![] as c>
                    new DataFlavorAndAction(${c.name?upper_case}NODE_FLAVOR, DataFlavorAndAction.COPYCUT<#if c.orderable = "yes">MOVE</#if>),
<#if c.copymovenode??>
<#assign COPYMOVEENTITYINFO = entityinfo[c.copymoveentity] >
                    new DataFlavorAndAction(${COPYMOVEENTITYINFO.name?upper_case}NODE_FLAVOR, DataFlavorAndAction.COPYMOVE),
</#if>
</#list>
                    }
                    // TODO - decide on state of this cut/destroy flag  - currently it is always true
                 <#if ENTITYINFO.access = "rw">, true</#if>);
            this.cf = cf;
        }
<#else>
   
        /**
         * Constructor
         *
         * @param e the entity associated with this node
         */
        public ${ENTITYINFO.name}Node(${ENTITYINFO.name} e) {
            super("${ENTITYINFO.name}Node", e, ${ENTITYINFO.name}.EM.class
                    // TODO - decide on state of this cut/destroy flag  - currently it is always true
                    <#if ENTITYINFO.access = "rw">, true</#if>);
        }
</#if>

    @UseCommonNodeActions({
<#if ENTITYINFO.orderable = "yes">
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeReorderAction",
                    node = "${ENTITYINFO.name}Node", position = 810),
</#if>
<#if haseditablechildren >
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodePasteAction",
                    node = "${ENTITYINFO.name}Node", position = 830),
</#if>
<#if ENTITYINFO.access = "rw" >
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeCutAction",
                    node = "${ENTITYINFO.name}Node",
                    position = 850, separator = 800),
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeCopyAction",
                    node = "${ENTITYINFO.name}Node", position = 870),
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeDeleteAction",
                    node = "${ENTITYINFO.name}Node", position = 890),
</#if>
<#if ENTITYINFO.orderable = "yes" >
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeMoveUpAction",
                    node = "${ENTITYINFO.name}Node", position = 910),
            @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeMoveDownAction",
                    node = "${ENTITYINFO.name}Node", position = 930),
</#if>
        })
    private static void useCommonNodeActions() {} // a dummy method
 
        @Override
        protected DataFlavor _getDataFlavor() {
           return ${ENTITYINFO.name?upper_case}NODE_FLAVOR; 
        }

         /**
         * Get the node display name
         *
         * @return the display name
         */
        @Override
        public String getDisplayName() {
            return getEntity() != null? getEntity().getDisplayName(): "#undefined#";
        }

        /**
         * Get the node display title
         *
         * @return the display title
         */
        @Override
        public String getDisplayTitle() {
            return getEntity() != null? getEntity().getDisplayTitle(): "#undefined#";
        }

<#if ENTITYINFO.access = "rw" >
        IntegerReadonlyProperty idproperty;
<#list ENTITYINFO.field![] as field>
<#if field.type != "rootref" >
        StringReadonlyProperty ${field.name}property;
</#if>
</#list>

</#if>
        @Override
        protected List<PropertySupport.ReadOnly<?>> createPropertyItems(List<PropertySupport.ReadOnly<?>> props) {
            ${ENTITYINFO.name} e =  getEntity();
            if (e != null) {
                props.add(new StringReadonlyProperty("Node Type", "${ENTITYINFO.name}Node"));
<#if ENTITYINFO.access = "rw" >
                props.add(idproperty = new IntegerReadonlyProperty("Id",e.getId()));
<#else>
                props.add(new IntegerReadonlyProperty("Id",e.getId()));
</#if>
<#list ENTITYINFO.field![] as field>
<#if field.type != "rootref" >
<#if ENTITYINFO.access = "rw" >
                props.add(${field.name}property = new StringReadonlyProperty("${field.label}", e.format${field.name?cap_first}()));
<#else>
                props.add(new StringReadonlyProperty("${field.label}", e.format${field.name?cap_first}()));
</#if>
</#if>
</#list>
            }
            return props;
        }

<#if ENTITYINFO.access = "rw" >
        @Override
        protected void _processCommonFieldChange(CommonEntityField field) {
            ${ENTITYINFO.name} e =  getEntity();
            switch (field) {
                case ALL:
                    if (e != null && idproperty != null) {
                        idproperty.update(e.getId());
<#list ENTITYINFO.field![] as field>
<#if field.type != "rootref" >
                        ${field.name}property.update(e.format${field.name?cap_first}());
</#if>
</#list>
                        propertyChange();
                    }
                    break;
                case ID:
                    if (e != null && idproperty != null) {
                        idproperty.update(e.getId());
                        propertyChange("Id");
                    }
                    break;
            }
        }
        
</#if>
<#if ENTITYINFO.access = "rw" >
        @Override
        protected void _processFieldChange(${ENTITYINFO.name}Field field) {
            ${ENTITYINFO.name} e =  getEntity();
            switch (field) {
<#list ENTITYINFO.field![] as field>
<#if field.type = "rootref" >
<#elseif field.type = "idx" >
                case ${field.name?upper_case}:
                    if (e != null && ${field.name}property != null) {
                        ${field.name}property.update(e.format${field.name?cap_first}());
                        propertyChange("${field.label}");
                    }
                    break;
<#else>
                case ${field.name?upper_case}:
                    if (e != null && ${field.name}property != null) {
                        ${field.name}property.update(e.format${field.name?cap_first}());
                        propertyChange("${field.label}");
                    }
                    break;
</#if>
</#list>
            }
        }
        
</#if>
        @Override
        protected void _moveAddChild(Entity child) throws IOException {
<#list ENTITYINFO.child![] as c>
<#if c.copymoveentity??>
            if (child instanceof ${c.copymoveentity}) {
                ${c.name?cap_first}.EM em = ${c.name?cap_first}.getEM();
                ${c.name?cap_first} e = em.getNew(getEntity());
                e.set${c.copymovefield?cap_first}((${c.copymoveentity}) child);
                return;
            }
</#if>
</#list>
            _cutAddChild(child);
        }

        @Override
        protected void _cutAddChild(Entity child) throws IOException {
<#list ENTITYINFO.child![] as c>
            if (child instanceof ${c.name?cap_first}) {
                getEntity().add${c.name?cap_first}((${c.name?cap_first}) child);
                return;
            }
</#list>
            throw new LogicException("${ENTITYINFO.name} Entity does not have a child of the requested class (" + child.getClass().getSimpleName() + ")");
        }

        @Override
        protected void _copyAddChild(Entity child) throws IOException {
<#list ENTITYINFO.child![] as c>
            if (child instanceof ${c.name?cap_first}) {
                ${c.name?cap_first}.getEM().getNew((${c.name?cap_first})child ,getEntity());
                return;
            }
<#if c.copymoveentity??>
            if (child instanceof ${c.copymoveentity}) {
                ${c.name?cap_first}.EM em = ${c.name?cap_first}.getEM();
                ${c.name?cap_first} e = em.getNew(getEntity());
                e.set${c.copymovefield?cap_first}((${c.copymoveentity}) child);
                return;
            }
</#if>
</#list>
            throw new LogicException("${ENTITYINFO.name} Entity does not have a child of the requested class (" + child.getClass().getSimpleName() + ")");
        }

<#if ENTITYINFO.access = "rw" >
        @Override
        protected void _cutAndPasteRemove()  throws IOException {
            getEntity().getParent().remove${ENTITYINFO.name}(getEntity());
        }

        @Override
        protected void _deleteRemove() throws IOException {
            getEntity().remove();
        }

</#if>
        @Override
        protected void _moveReorderChildByFlavor(DataFlavor df, int[] perm) {
<#list ENTITYINFO.child![] as c>
<#if c.orderable = "yes" >
            if (df == ${c.name?upper_case}NODE_FLAVOR) {
                getEntity().reorder${c.name?cap_first}s(perm, cf.getOffsetMin${c.name?cap_first}s(), cf.getOffsetMax${c.name?cap_first}s());
                return;
            }
</#if>
</#list>
            throw new LogicException("${ENTITYINFO.name} Entity does not have a child of the requested DataFlavor that is reorderable");
        }

        @Override
        public Action getPreferredAction() {
            return findDefaultAction("${ENTITYINFO.name}Node");
        }

        @Override
        public Action[] getActions(boolean context) {
            return findActions("${ENTITYINFO.name}Node");
        }
}
