<#--
 * Copyright (C) 2014-2016 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Entity Editor class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#-- ============================================== -->
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import java.util.Arrays;
import java.util.List;
import javax.swing.JComponent;
import ${datapackage}.*;
import uk.org.rlinsdale.nbpcglibrary.form.*;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import uk.org.rlinsdale.nbpcglibrary.topcomponent.*;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Editor for ${ENTITYINFO.name}.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${ENTITYINFO.name}Editor",
iconBase = "com/famfamfam/www/silkicons/${ENTITYINFO.icon}.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_${ENTITYINFO.name}Editor=${ENTITYINFO.name} Editor",
    "HINT_${ENTITYINFO.name}Editor=This is the ${ENTITYINFO.name} Editor"
})
public final class ${ENTITYINFO.name}Editor extends EditorTopComponent<${ENTITYINFO.name}> {
    
    private final TitleChangeListener titlechangelistener;
    private final CompositePresenter presenter;
  
    public ${ENTITYINFO.name}Editor(${ENTITYINFO.name} e) {
        super(e,
                NbBundle.getMessage(${ENTITYINFO.name}Editor.class, "CTL_${ENTITYINFO.name}Editor"),
                NbBundle.getMessage(${ENTITYINFO.name}Editor.class, "HINT_${ENTITYINFO.name}Editor"));
        presenter = new CompositePresenter();
        presenter.setGetChildPresentersFunction(() -> getPanePresenters());
        titlechangelistener = new TitleChangeListener("Editor:" + e.instanceDescription());
    }

    private List<PanePresenter> getPanePresenters() {
        return Arrays.asList(
                         new ${ENTITYINFO.name}Presenter(entity)
<#if ENTITYINFO.childnodesineditor??>
<#list ENTITYINFO.childnodesineditor?split(",") as childnode>
                        ,
                        new ${childnode}TablePresenter(entity)
</#list>
</#if>
        );
    }

    @Override
    protected PanePresenter getPresenter() {
        return presenter;
    }
    
    @Override
    protected JComponent getDisplayComponent() {
        return presenter.getView();
    }

    @Override
    protected void opened() {
        super.opened();
        presenter.enableView();
        setName("${ENTITYINFO.name}: " + entity.getDisplayTitle());
        entity.addTitleListener(titlechangelistener);
    }

    @Override
    protected void closed() {
        entity.removeTitleListener(titlechangelistener);
        super.closed();
    }

    private class TitleChangeListener extends Listener<SimpleEventParams> {

        public TitleChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(SimpleEventParams p) {
            setName("${ENTITYINFO.name}: " + entity.getDisplayTitle());
        }
    }
}