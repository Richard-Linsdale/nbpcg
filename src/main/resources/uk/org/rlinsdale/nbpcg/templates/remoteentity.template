<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Remote Entity class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import java.io.Serializable;
import javax.json.JsonValue;
import javax.json.stream.JsonGenerator;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import uk.org.rlinsdale.nbpcglibrary.remotedb.IdandstampEntity;
import uk.org.rlinsdale.nbpcglibrary.json.JsonConversionException;
import uk.org.rlinsdale.nbpcglibrary.json.JsonUtil;
/**
 * The ${ENTITYINFO.name} Remote Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@Entity
@Table(name = "${ENTITYINFO.dbtablename}")
@NamedQueries({
    @NamedQuery(name = "${ENTITYINFO.dbtablename}.findAll", query = "SELECT a FROM ${ENTITYINFO.dbtablename} a"),
<#list ENTITYINFO.field![] as field >
<#if field.type = "rootref" || field.type = "password">
<#else>
    @NamedQuery(name = "${ENTITYINFO.dbtablename}.findBy${field.name?cap_first}", query = "SELECT a FROM ${ENTITYINFO.dbtablename} a WHERE a.${field.name} = :${field.name}"),
</#if>
</#list>
    })
public class ${ENTITYINFO.name} implements Serializable, IdandstampEntity<${ENTITYINFO.dbtablename}> {

    private static final long serialVersionUID = 1L;
<#if ENTITYINFO.withfields = "Idandstamp" >
<#if ENTITYINFO.type = "Idkeyauto" >
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "id")
    private Integer id;
</#if>
    @Basic(optional = false)
    @NotNull
    @Size(min = 4, max = 4)
    @Column(name = "createdby")
    private String createdby;
    @Basic(optional = false)
    @NotNull
    @Size(min = 14, max = 14)
    @Column(name = "createdon")
    private String createdon;
    @Basic(optional = false)
    @NotNull
    @Size(min = 4, max = 4)
    @Column(name = "updatedby")
    private String updatedby;
    @Basic(optional = false)
    @NotNull
    @Size(min = 14, max = 14)
    @Column(name = "updatedon")
    private String updatedon;
</#if>
<#list ENTITYINFO.field![] as field >
<#if field.type = "rootref">
<#elseif field.type = "ref">
    @Basic(optional = false)
    private Integer ${field.name};
<#elseif field.type = "reference">
    @Basic(optional = false)
    private Integer ${field.name};
<#elseif field.type = "password">
    @Basic(optional = false)
    @NotNull
    @Size(min = ${field.min}, max = ${field.max})
    @Column(name = "${field.dbcolumnname}")
    private String ${field.name};
<#elseif field.type = "String">
    @Basic(optional = false)
<#if field.nullsql = "NOT NULL" >
    @NotNull
</#if>
    @Size(min = ${field.min}, max = ${field.max})
    @Column(name = "${field.dbcolumnname}")
    private String ${field.name};
<#else>
    @Basic(optional = false)
    @NotNull
    @Column(name = "${field.dbcolumnname}")
    private ${field.jsontype} ${field.name};
</#if>
</#list>
    /**
     * Constructor - ${ENTITYINFO.name}.
     */
    public ${ENTITYINFO.name}() {
    }

@Override
    public void setField(String key, JsonValue value) throws JsonConversionException {
        switch (key) {
            <#list ENTITYINFO.field![] as field >
<#if field.type = "rootref">
<#elseif field.type = "ref">
            case "${field.name}":
                ${field.name} = JsonUtil.getReferenceValue(value);
                return;
<#elseif field.type = "reference">
            case "${field.name}":
                ${field.name} = JsonUtil.getReferenceValue(value);
                return;
<#else>
            case "${field.name}":
                ${field.name} = JsonUtil.get${field.jsontype}Value(value);
                return;
</#if>
</#list>
            default:
                throw new JsonConversionException();
        }
    }

    @Override
    public void writeField(JsonGenerator generator, String key) throws JsonConversionException {
        switch (key) {
<#if ENTITYINFO.type = "Idkeyauto" >
            case "id":
                JsonUtil.writeIntegerValue(generator, "id",  id);
                return;
</#if>
<#list ENTITYINFO.field![] as field >
<#if field.type = "rootref">
<#elseif field.type = "ref">
            case "${field.name}":
                JsonUtil.writeReferenceValue(generator, "${field.name}", ${field.name});
                return;
<#elseif field.type = "reference">
            case "${field.name}":
                JsonUtil.writeReferenceValue(generator, "${field.name}", ${field.name});
                return;
<#else>
            case "${field.name}":
                JsonUtil.write${field.jsontype}Value(generator, "${field.name}", ${field.name});
                return;
</#if>
</#list>
            default:
                throw new JsonConversionException();
        }
    }
    
    @Override
    public void writePK(JsonGenerator generator) {
        JsonUtil.writeIntegerValue(generator, id);
    }
    
    @Override
    public void writePKwithkey(JsonGenerator generator) {
        JsonUtil.writeIntegerValue(generator, "id", id);
    }

    @Override
    public void writeAllFields(JsonGenerator generator, String label) {
        if (label == null ) {
            generator.writeStartObject();
        } else {
            generator.writeStartObject(label);
        }
<#if ENTITYINFO.withfields = "Idandstamp" >
<#if ENTITYINFO.type = "Idkeyauto" >
        JsonUtil.writeIntegerValue(generator, "id", id);
</#if>
        JsonUtil.writeStringValue(generator, "createdby", createdby);
        JsonUtil.writeStringValue(generator, "createdon", createdon);
        JsonUtil.writeStringValue(generator, "updatedby", updatedby);
        JsonUtil.writeStringValue(generator, "updatedon", updatedon);
</#if>
<#list ENTITYINFO.field![] as field >
<#if field.type = "rootref">
<#elseif field.type = "ref">
        JsonUtil.writeReferenceValue(generator, "${field.name}", ${field.name});
<#elseif field.type = "reference">
        JsonUtil.writeReferenceValue(generator, "${field.name}", ${field.name});
<#else>
        JsonUtil.write${field.jsontype}Value(generator, "${field.name}", ${field.name});
</#if>
</#list>
        generator.writeEnd();
    }

<#if ENTITYINFO.withfields = "Idandstamp" >
<#if ENTITYINFO.type = "Idkeyauto" >
    @Override
    public Integer getId() {
        return id;
    }

    /**
     * Set the id - do not use (but JPA needs getters and setters)
     *
     * @param id the primary key identifier
     */
    public void setId(Integer id) {
        this.id = id;
    }

</#if>
    /**
     * Get the createdby field value
     *
     * @return the value
     */
    public String getCreatedby() {
        return createdby;
    }

    @Override
    public void setCreatedby(String createdby) {
        this.createdby = createdby;
    }

    /**
     * Get the createdon field value
     *
     * @return the value
     */    
    public String getCreatedon() {
        return createdon;
    }

    @Override
    public void setCreatedon(String createdon) {
        this.createdon = createdon;
    }

    /**
     * Get the updatedBy field value
     *
     * @return the value
     */
    public String getUpdatedby() {
        return updatedby;
    }

    @Override
    public void setUpdatedby(String updatedby) {
        this.updatedby = updatedby;
    }

    /**
     * Get the updatedon field value
     *
     * @return the value
     */
    public String getUpdatedon() {
        return updatedon;
    }

    @Override
    public void setUpdatedon(String updatedon) {
        this.updatedon = updatedon;
    }

</#if>
<#list ENTITYINFO.field![] as field >
<#if field.type = "rootref">
<#elseif field.type = "ref">
    /**
     * Get the ${field.name}
     *
     * @return the value
     */
    public Integer get${field.name?cap_first}() {
        return ${field.name};
    }

    /**
     * Set the ${field.name}
     *
     * @param ${field.name} the value
     */
    public void set${field.name?cap_first}(Integer ${field.name}) {
        this.${field.name} = ${field.name};
    }

<#elseif field.type = "reference">
    /**
     * Get the ${field.name}
     *
     * @return the value
     */
    public Integer get${field.name?cap_first}() {
        return ${field.name};
    }

    /**
     * Set the ${field.name}
     *
     * @param ${field.name} the value
     */
    public void set${field.name?cap_first}(Integer ${field.name}) {
        this.${field.name} = ${field.name};
    }

<#else>
    /**
     * Get the ${field.name}
     *
     * @return the value
     */
    public ${field.javatype} get${field.name?cap_first}() {
        return ${field.name};
    }

    /**
     * Set the ${field.name}
     *
     * @param ${field.name} the value
     */
    public void set${field.name?cap_first}(${field.jsontype} ${field.name}) {
        this.${field.name} = ${field.name};
    }

</#if>
</#list>

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof ${ENTITYINFO.name})) {
            return false;
        }
        ${ENTITYINFO.name} other = (${ENTITYINFO.name}) object;
        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));
    }

    @Override
    public String toString() {
        return "${ENTITYINFO.name}[ id=" + id + " ]";
    }
}
