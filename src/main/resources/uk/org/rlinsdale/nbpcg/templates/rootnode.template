<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Root Node class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import java.awt.datatransfer.DataFlavor;
import java.io.IOException;
import java.util.List;
import javax.swing.Action;
import ${datapackage}.*;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.annotations.UseCommonNodeAction;
import uk.org.rlinsdale.nbpcglibrary.annotations.UseCommonNodeActions;
import uk.org.rlinsdale.nbpcglibrary.node.nodes.RootNode;
import uk.org.rlinsdale.nbpcglibrary.node.properties.StringReadonlyProperty;
import uk.org.rlinsdale.nbpcglibrary.common.LogicException;
import org.openide.nodes.*;
<#list ENTITYINFO.child![] as child>
import static ${package}.${child.name?cap_first}Node.${child.name?upper_case}NODE_FLAVOR;
</#list>
import uk.org.rlinsdale.nbpcglibrary.node.nodes.BasicNode;

/**
 * Node for ${ENTITYINFO.name}
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name}Node extends RootNode<${ENTITYINFO.name}> {

    private final ${ENTITYINFO.name}NodeChildFactory cf;

   /**
     * Constructor
     */
    public ${ENTITYINFO.name}Node() {
        this(${ENTITYINFO.name}.get());
    }

    private ${ENTITYINFO.name}Node(${ENTITYINFO.name} e){
        this(e, new ${ENTITYINFO.name}NodeChildFactory(e));
    }

    private ${ENTITYINFO.name}Node(${ENTITYINFO.name} e, ${ENTITYINFO.name}NodeChildFactory cf) {
        super(e, cf, new DataFlavor[] {<#list ENTITYINFO.child![] as child>${child.name?upper_case}NODE_FLAVOR, </#list>});
        this.cf = cf;
    }

    /**
     * Get the node display name
     *
     * @return the display name
     */
    @Override
    public String getDisplayName() {
        return ${ENTITYINFO.name}.get().getDisplayName();
    }

    @Override
    protected List<PropertySupport.ReadOnly<?>> createPropertyItems(List<PropertySupport.ReadOnly<?>> props) {
        props.add(new StringReadonlyProperty("Node Type", "${ENTITYINFO.name}Node"));
        return props;
    }

    @UseCommonNodeActions({
<#list ENTITYINFO.child![] as child>
        @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodePasteAction",
                node = "${ENTITYINFO.name}Node", position = 830, separator = 800),
<#if child.orderable = "yes">
        @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeReorderAction",
                node = "${ENTITYINFO.name}Node", position = 810, separator = 800),
        @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeMoveUpAction",
                node = "${ENTITYINFO.name}Node", position = 910),
        @UseCommonNodeAction(id = "uk.org.rlinsdale.nbpcglibrary.node.actions.NodeMoveDownAction",
                node = "${ENTITYINFO.name}Node", position = 930),
</#if>
</#list>
        })
    private static void register${ENTITYINFO.name}NodeAnnotations() {} // a dummy method to allow annotations to be attached

    @Override
    public Action getPreferredAction() {
         return findDefaultAction("${ENTITYINFO.name}Node");
    }

    @Override
    public Action[] getActions(boolean context) {
        return findActions("${ENTITYINFO.name}Node");
    }

@Override
    protected void nodeCutPaste(BasicNode child) throws IOException {
        CoreEntity e = child.getEntity();
<#list ENTITYINFO.child![] as child>
        if (e instanceof ${child.name?cap_first}) {
            ${child.name?cap_first} f = (${child.name?cap_first}) e;
            f.getParent().remove${child.name?cap_first}(f);
            getEntity().add${child.name?cap_first}(f);
            return;
        }
</#list>
        throw new LogicException("${ENTITYINFO.name} Entity does not have a child of the requested class (" + e.getClass().getSimpleName() + ")");
    }
    
    @Override
    protected void nodeCopyPaste(BasicNode child) throws IOException {
        CoreEntity e = child.getEntity();
<#list ENTITYINFO.child![] as child>
        if (e instanceof ${child.name?cap_first}) {
            ${child.name?cap_first}.getEM().getNew((${child.name?cap_first}) e  ,getEntity());
            return;
        }
</#list>
        throw new LogicException("${ENTITYINFO.name} Entity does not have a child of the requested class (" + e.getClass().getSimpleName() + ")");
    }

    @Override
    protected void nodeReorderChildByFlavor(DataFlavor df, int[] perm) {
<#list ENTITYINFO.child![] as child>
<#if child.orderable = "yes">
        if (df == ${ENTITYINFO.name}NodeChildFactory.${child.name?upper_case}NODE_FLAVOR) {
            getEntity().reorder${child.name?cap_first}s(perm, cf.getOffsetMin${child.name?cap_first}s(), cf.getOffsetMax${child.name?cap_first}s());
            return;
        }
</#if>
</#list>
    }

    @Override
    protected DataFlavor nodeGetDataFlavor() {
        return null;
    }
}
