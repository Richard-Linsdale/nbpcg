/*
 * Copyright (C) 2014 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
<#-- Freemarker Template for any Table Entity Node Editor class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#-- ============================================== -->
<#assign NODEINFO = nodeinfo[usenodeinfo] >
package ${package};

import java.io.IOException;
import ${datapackage}.*;
import ${nodepackage}.*;
import uk.org.rlinsdale.nbpcg.datasupportlib.entity.*;
import uk.org.rlinsdale.nbpcg.formsupportlib.*;
import uk.org.rlinsdale.nbpcg.nodesupportlib.SaveHandler;
import uk.org.rlinsdale.nbpcg.nodesupportlib.nodes.NameChangeListenerParams;
import uk.org.rlinsdale.nbpcg.nodesupportlib.nodes.TreeNodeRW;
import uk.org.rlinsdale.nbpcg.supportlib.*;
import uk.org.rlinsdale.nbpcg.topcomponentsupportlib.*;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * NodeEditor for ${NODEINFO.name}.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${NODEINFO.name}Editor",
iconBase = "com/famfamfam/www/silkicons/${NODEINFO.icon}.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_${NODEINFO.name}Editor=${NODEINFO.name} Editor",
    "HINT_${NODEINFO.name}Editor=This is the ${NODEINFO.name} Editor"
})
public final class ${NODEINFO.name}Editor extends NodeEditorTopComponent<${NODEINFO.entity}> {
    
    private final Form form;
    private final SaveHandler saveHandler = new FormSaveHandler();
    private final FormChangeListener formchangelistener = new FormChangeListener("${NODEINFO.name}NodeEditor/FormField");
    private final EntityFieldChangeListener entityfieldchangelistener = new EntityFieldChangeListener("${NODEINFO.name}NodeEditor/EntityField");
    private final TitleChangeListener titlechangelistener = new TitleChangeListener("${NODEINFO.name}NodeEditor/Title");
    //
<#list NODEINFO.field![] as field>
<#if field.type!="idx"  >
<#if field.entryfield??>
    private PasswordField ${field.entryfield}Field;
<#elseif field.type=="reference" >
    private ${field.references}ChoiceField ${field.name}Field;
<#elseif field.type=="ref">
<#elseif field.type=="enum">
    private ${field.name?cap_first}EnumOf${NODEINFO.entity}ChoiceField ${field.name}Field;
<#else>
    private ${field.fieldclass} ${field.name}Field;
</#if>
</#if>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
    private boolean ${field.name}BadFormat=false;
</#if>
</#list>
  
    public ${NODEINFO.name}Editor(TreeNodeRW<${NODEINFO.entity}> node) {
        super(node,
                NbBundle.getMessage(${NODEINFO.name}Editor.class, "CTL_${NODEINFO.name}Editor"),
                NbBundle.getMessage(${NODEINFO.name}Editor.class, "HINT_${NODEINFO.name}Editor"));
        form = new Form("${NODEINFO.name}Editor",  new EditorFields());
    }

    @Override
    protected Form getForm() {
        setName("${NODEINFO.name}: " + node.getDisplayTitle());
        node.setSaveHandler(saveHandler);
        form.setAdditionalRules(entity);
        form.set();
        node.addTitleListener(titlechangelistener);
        entity.addFieldListener(entityfieldchangelistener);
<#list NODEINFO.field![] as field>
<#if field.type="reference">
        ${field.name}Field.initChoices();
        ${field.name}Field.set(${field.displaykey}Display.getDisplayName(entity.get${field.name?cap_first}(), ""));
<#elseif field.type="ref">
<#elseif field.type=="enum">
        ${field.name}Field.initChoices();
        ${field.name}Field.set(entity.get${field.name?cap_first}());
</#if>
</#list>
        return form;                 
    }

    @Override
    protected Form dropForm() {
<#list NODEINFO.field![] as field>
<#if field.type="reference" || field.type="enum">
        ${field.name}Field.closeChoices();
</#if>
</#list>
        form.presave();
        node.removeTitleListener(titlechangelistener);
        node.setSaveHandler(null);
        entity.removeFieldListener(entityfieldchangelistener);
        return form;
    }

    private class EditorFields extends FieldsDef {
        
        public EditorFields() {
            super("${NODEINFO.name}NodeEditorFields");
<#list NODEINFO.field![] as field>
<#if field.type!="idx" >
<#if field.entryfield??>
            add(${field.entryfield}Field = PasswordField.create(User.${field.entryfield?upper_case}FIELD, "${field.label}", formchangelistener));
<#elseif field.type=="reference" >
            add(${field.name}Field = new ${field.references}ChoiceField(${NODEINFO.entity}.${field.name?upper_case}FIELD, "${field.label}", formchangelistener));
<#elseif field.type=="ref">
<#elseif field.type == "enum" >
            add(${field.name}Field = new ${field.name?cap_first}EnumOf${NODEINFO.entity}ChoiceField(${NODEINFO.entity}.${field.name?upper_case}FIELD, "${field.label}", formchangelistener));
<#else>
            add(${field.name}Field = ${field.fieldclass}.create(${NODEINFO.entity}.${field.name?upper_case}FIELD, "${field.label}", formchangelistener));
</#if>
</#if>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
            ${field.name}Field.addRule(new ${field.name?cap_first}BadFormatRule());
</#if>
</#list>
        }

        @Override
        public void set() {
<#list NODEINFO.field![] as field>
<#if field.type="reference">
            ${field.name}Field.set(${field.displaykey}Display.getDisplayName(entity.get${field.name?cap_first}(), ""));
<#elseif field.type="ref">
<#elseif field.type=="int" || field.type=="long" ||field.type=="date" || field.type=="datetime">
            ${field.name}Field.set(entity.get${field.name?cap_first}Text());
<#elseif field.type == "rootref" || field.type="idx" >
<#else>
<#if field.entryfield??>
            ${field.entryfield}Field.set("");
<#else>
            ${field.name}Field.set(entity.get${field.name?cap_first}());
</#if>
</#if>
</#list>
        }
        
        @Override
        public void presave() {
<#list NODEINFO.field![] as field>
<#if field.type="reference">
    entity.set${field.name?cap_first}(${field.name}Field.findSelectedEntity());
<#elseif field.type="ref">
<#elseif field.type="enum" >
            entity.set${field.name?cap_first}(${field.name}Field.get());
<#elseif field.type == "rootref" || field.type="idx" >
<#else>
<#if field.entryfield??>
            String val = ${field.entryfield}Field.get();
            if (!"".equals(val)) {
                entity.set${field.entryfield?cap_first}(val);
            }
<#else>
            entity.set${field.name?cap_first}(${field.name}Field.get());
</#if>
</#if>
</#list>
        }

        @Override
        public boolean save() {
            return entity.save();
        }
    }

<#list NODEINFO.field![] as field>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
    private class ${field.name?cap_first}BadFormatRule  extends Rule {
        
        public ${field.name?cap_first}BadFormatRule() {
<#if field.type=="int" || field.type=="long">
            super("${field.name?cap_first} is not in Number format");
<#else>
            super("${field.name?cap_first} is not in Date format");
</#if>
        }
        
        @Override
        public boolean ruleCheck() {
            return !${field.name}BadFormat;
        }
    }
    
</#if>
</#list> 
    private class FormSaveHandler implements SaveHandler {

        @Override
        public void handleSave() throws IOException {
            form.save();
        }
    }

    private class EntityFieldChangeListener extends Listener<FieldChangeListenerParams> {

        public EntityFieldChangeListener(String name) {
            super(name);
        }

        @Override
        @SuppressWarnings("IncompatibleEquals")
        public void action(FieldChangeListenerParams p) {
            if (p.equals(FieldChangeListenerParams.ALLFIELDS)) {
                form.set();
            }
<#list NODEINFO.field![] as field>
<#if field.type!="idx" >
             if (p.equals(${NODEINFO.entity}.${field.name?upper_case}FIELD)){
<#if field.type="reference" >
                ${field.name}Field.set(${field.displaykey}Display.getDisplayName(entity.get${field.name?cap_first}(), ""));
<#elseif field.type="ref" >
<#elseif field.type=="int" || field.type=="long" ||field.type=="date" || field.type=="datetime">
                ${field.name}Field.set(entity.get${field.name?cap_first}Text());
                ${field.name}BadFormat=!p.isFormatOK();
<#else>
<#if field.entryfield??>
                ${field.entryfield}Field.set("");
<#else>
                ${field.name}Field.set(entity.get${field.name?cap_first}());
</#if>
</#if>
            }
</#if>
</#list>
            form.checkRules();
            form.writeAllFailureMessages();
        }
    }

    private class TitleChangeListener extends Listener<NameChangeListenerParams> {

        public TitleChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(NameChangeListenerParams p) {
            setName("${NODEINFO.name}: "+p.get());
        }
    }

    private class FormChangeListener extends Listener<FormFieldChangeListenerParams> {

         public FormChangeListener(String name){
            super(name);
        }

        @Override
        @SuppressWarnings("IncompatibleEquals")
        public void action(FormFieldChangeListenerParams p) {
<#list NODEINFO.field![] as field>
<#if field.type!="idx" >
<#if field.type="reference">
            if (p.equals(${NODEINFO.entity}.${field.name?upper_case}FIELD)){
                entity.set${field.name?cap_first}(${field.name}Field.findSelectedEntity());
            }
<#elseif field.type="ref" >
<#elseif field.type="enum" >
            if (p.equals(${NODEINFO.entity}.${field.name?upper_case}FIELD)){
                entity.set${field.name?cap_first}(${field.name}Field.get());
            }
<#else>
<#if field.entryfield??>
            if (p.equals(${NODEINFO.entity}.${field.entryfield?upper_case}FIELD)){
                entity.set${field.entryfield?cap_first}(${field.entryfield}Field.get());
            }
<#else>
            if (p.equals(${NODEINFO.entity}.${field.name?upper_case}FIELD)){
                entity.set${field.name?cap_first}(${field.name}Field.get());
            }
</#if>
</#if>
</#if>
</#list>
        }
    }
}