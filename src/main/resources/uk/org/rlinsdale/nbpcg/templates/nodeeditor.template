<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Table Entity Node Editor class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#-- ============================================== -->
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

<#assign needListImport = "no" >
<#list ENTITYINFO.field![] as field>
<#if field.type="reference" || field.type="reference" || field.type="enum" >
<#assign needListImport = "yes" >
</#if>
</#list>
import java.awt.Component;
import java.awt.Graphics;
import static java.beans.BeanInfo.ICON_COLOR_16x16;
import java.io.IOException;
<#if needListImport = "yes">
import java.util.List;
</#if>
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.netbeans.spi.actions.AbstractSavable;
import ${datapackage}.*;
import ${nodepackage}.${ENTITYINFO.name}Node;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.form.*;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import uk.org.rlinsdale.nbpcglibrary.topcomponent.*;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field;
import static ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field.*;
import static uk.org.rlinsdale.nbpcglibrary.data.entity.EntityFieldChangeEventParams.CommonEntityField.ALL;
import uk.org.rlinsdale.nbpcglibrary.data.entity.EntityFieldChangeEventParams.CommonEntityField;
import static uk.org.rlinsdale.nbpcglibrary.form.Form.FormSaveResult.SAVESUCCESS;

/**
 * NodeEditor for ${ENTITYINFO.name}Node.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${ENTITYINFO.name}NodeEditor",
iconBase = "com/famfamfam/www/silkicons/${ENTITYINFO.icon}.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_${ENTITYINFO.name}NodeEditor=${ENTITYINFO.name} Editor",
    "HINT_${ENTITYINFO.name}NodeEditor=This is the ${ENTITYINFO.name} Editor"
})
public final class ${ENTITYINFO.name}NodeEditor extends NodeEditorTopComponent<${ENTITYINFO.name}, ${ENTITYINFO.name}Field> {
    
    private final EntityFieldChangeListener entityfieldchangelistener;
    private final TitleChangeListener titlechangelistener;
    private final EntityStateChangeListener entitystatechangelistener;
    //
    private Form form;
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx"  >
<#if field.entryfield??>
    private PasswordField ${field.entryfield}Field;
<#elseif field.type=="reference" >
    private ${field.references}ChoiceField ${field.name}Field;
<#elseif field.type=="ref" || field.type=="rootref">
<#elseif field.type=="enum">
    private ${ENTITYINFO.name}${field.name?cap_first}ChoiceField ${field.name}Field;
<#else>
    private ${field.fieldclass} ${field.name}Field;
</#if>
</#if>
</#list>
  
    public ${ENTITYINFO.name}NodeEditor(${ENTITYINFO.name}Node node) {
        super(node,
                NbBundle.getMessage(${ENTITYINFO.name}NodeEditor.class, "CTL_${ENTITYINFO.name}NodeEditor"),
                NbBundle.getMessage(${ENTITYINFO.name}NodeEditor.class, "HINT_${ENTITYINFO.name}NodeEditor"));
        ${ENTITYINFO.name} e = node.getEntity();
        String desc = "Editor:" + e.instanceDescription();
        entityfieldchangelistener = new EntityFieldChangeListener(desc);
        titlechangelistener = new TitleChangeListener(desc);
        entitystatechangelistener = new EntityStateChangeListener(desc);
    }

    @Override
    protected Form getForm() {
        setName("${ENTITYINFO.name}: " + node.getDisplayTitle());
        form = new Form("${ENTITYINFO.name}Editor",  new EditorFields());
        entity.addTitleListener(titlechangelistener);
        entity.addFieldListener(entityfieldchangelistener);
        entity.addStateListener(entitystatechangelistener);
        return form;                 
    }

    @Override
    protected Form dropForm() {
<#list ENTITYINFO.field![] as field>
<#if field.type="reference">
        ${field.name}Field.closeChoices();
</#if>
</#list>
        entity.removeTitleListener(titlechangelistener);
        entity.removeFieldListener(entityfieldchangelistener);
        entity.removeStateListener(entitystatechangelistener);
        return form;
    }

    @Override
    protected boolean canCloseForm() {
         return form.save() == SAVESUCCESS;
    }
    
    private class EditorFields extends FieldsDef {
        
        public EditorFields() {
            super(new EditorFieldsBackingObject());
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx" >
<#if field.entryfield??>
            add(${field.entryfield}Field = new PasswordField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}"));
<#elseif field.type=="reference" >
<#if field.optional??>
            add(${field.name}Field = new ${field.references}ChoiceField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}", true));
<#else>
            add(${field.name}Field = new ${field.references}ChoiceField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}", false));
</#if>
<#elseif field.type=="ref" || field.type = "rootref" >
<#elseif field.type == "enum" >
            add(${field.name}Field = new ${ENTITYINFO.name}${field.name?cap_first}ChoiceField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}"));
<#else>
            add(${field.name}Field =  new ${field.fieldclass}(new ${field.name?cap_first}FieldBackingObject(), "${field.label}"));
</#if>
</#if>
</#list>
        }

        @Override
        public boolean save() {
            return entity.save();
        }
    }

    private class EditorFieldsBackingObject implements FieldsDefBackingObject {

        @Override
        public boolean checkRules() {
            return entity.getEntityRules().checkRules();
        }

        @Override
        public String getErrorMessages() {
            return entity.getEntityRules().getErrorMessages();
        }
    }

<#list ENTITYINFO.field![] as field>
<#if field.type="reference">

    private class ${field.name?cap_first}FieldBackingObject extends ChoiceFieldBackingObject {
    
        @Override
        public List<String> getChoices() {
            return null;
        }

        @Override
        public void set(String value) {
           entity.set${field.name?cap_first}(${field.name}Field.convertTexttoEntity(value));
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}() != null ? entity.get${field.name?cap_first}().getDisplayTitle() : "";
        }
    }
<#elseif field.type="ref"  >
<#elseif field.type="enum" >

    private class ${field.name?cap_first}FieldBackingObject extends ChoiceFieldBackingObject {
    
        @Override
        public List<String> getChoices() {
            return null;
        }

        @Override
        public void set(String value) {
           entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }
    }
<#elseif field.type == "rootref" || field.type="idx" >
<#elseif field.type == "boolean" >

    private class ${field.name?cap_first}FieldBackingObject implements CheckboxFieldBackingObject {
    
    @Override
        public void set(Boolean value) {
             entity.set${field.name?cap_first}(value);
        }

        @Override
        public Boolean get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean checkRules() {
            return true;
        }

        @Override
        public String getErrorMessages() {
            return "";
        }
    }
<#else>
<#if field.entryfield??>

    private class ${field.name?cap_first}FieldBackingObject implements FieldBackingObject<String> {
    
        @Override
        public void set(String value) {
            if (!"".equals(val)) {
                entity.set${field.entryfield?cap_first}(value);
            }
        }

        @Override
        public String get() {
            return "";
        }

        @Override
        public boolean checkRules() {
            return entity.get${field.name?cap_first}Rules().checkRules();
        }

        @Override
        public String getErrorMessages() {
            return entity.get${field.name?cap_first}Rules().getErrorMessages();
        }
    }
<#else>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >

    private class ${field.name?cap_first}FieldBackingObject implements FieldBackingObject<String> {
    
    @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}Text();
        }

        @Override
        public boolean checkRules() {
            return entity.get${field.name?cap_first}Rules().checkRules();
        }

        @Override
        public String getErrorMessages() {
            return entity.get${field.name?cap_first}Rules().getErrorMessages();
        }
    }
<#else>

    private class ${field.name?cap_first}FieldBackingObject implements FieldBackingObject<String> {
    
    @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean checkRules() {
            return entity.get${field.name?cap_first}Rules().checkRules();
        }

        @Override
        public String getErrorMessages() {
            return entity.get${field.name?cap_first}Rules().getErrorMessages();
        }
    }
</#if>
</#if>
</#if>
</#list>
    private class TCSavable extends AbstractSavable implements Icon, HasInstanceDescription {

        private Icon nodeicon;

        public TCSavable() {
            register();
        }

        @Override
        public String instanceDescription() {
            return LogBuilder.instanceDescription(this, "${ENTITYINFO.name}Editor");
        }

        @Override
        protected void handleSave() throws IOException {
            LogBuilder.writeLog("nbpcglibrary.node", this, "handleSave");
            if (form.save() == SAVESUCCESS) {
                editor().content.remove(this);
                unregister();
            }
        }

        @Override
        protected String findDisplayName() {
            return entity.getDisplayTitle();
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof TCSavable) {
                return editor() == ((TCSavable) obj).editor();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return editor().hashCode();
        }
        
        ${ENTITYINFO.name}NodeEditor editor() {
            return ${ENTITYINFO.name}NodeEditor.this;
        }

        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            if (nodeicon == null) {
                nodeicon = new ImageIcon(node.getIcon(ICON_COLOR_16x16));
            }
            nodeicon.paintIcon(c, g, x, y);
        }

        @Override
        public int getIconWidth() {
            if (nodeicon == null) {
                nodeicon = new ImageIcon(node.getIcon(ICON_COLOR_16x16));
            }
            return nodeicon.getIconWidth();
        }

        @Override
        public int getIconHeight() {
            if (nodeicon == null) {
                nodeicon = new ImageIcon(node.getIcon(ICON_COLOR_16x16));
            }
            return nodeicon.getIconHeight();
        }
    }

    private class EntityStateChangeListener extends Listener<EntityStateChangeEventParams> {

        public EntityStateChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(EntityStateChangeEventParams p) {
            switch (p.getTransition()) {
                case EDIT:
                    if (getLookup().lookup(TCSavable.class) == null) {
                        content.add(new TCSavable());
                    }
                    break;
                case SAVE:
                    break;
                case REMOVE:
                    break;
                case RESET:
            }
        }
    }
    

    private class EntityFieldChangeListener extends Listener<EntityFieldChangeEventParams<${ENTITYINFO.name}Field>> {

        public EntityFieldChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(EntityFieldChangeEventParams<${ENTITYINFO.name}Field> p) {
            CommonEntityField c = p.getCommon();
            if (c!= null ) {
                switch(c) {
                    case ALL:
                        form.updateAllFieldsFromBackingObject();
                        break;
                }
            }
            ${ENTITYINFO.name}Field f = p.get();
            if (f!= null) {
                switch (f) {
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx" >
<#if field.type!="rootref" >
                    case ${field.name?upper_case}:
<#if field.type="reference"  >
                        ${field.name}Field.updateFieldFromBackingObject();
<#elseif field.type="ref" >
<#elseif field.type=="int" || field.type=="long" ||field.type=="date" || field.type=="datetime">
                        if (p.isFormatOK()) {
                            ${field.name}Field.updateFieldFromBackingObject();
                        } else {
                            ${field.name}Field.checkRules();
                        }
<#else>
                        ${field.name}Field.updateFieldFromBackingObject();
</#if>
                        break;
</#if>
</#if>
</#list>
                }
            }
        }
    }

    private class TitleChangeListener extends Listener<SimpleEventParams> {

        public TitleChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(SimpleEventParams p) {
            setName("${ENTITYINFO.name}: " + node.getDisplayTitle());
        }
    }
}