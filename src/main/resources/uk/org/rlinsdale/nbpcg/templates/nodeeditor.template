<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Table Entity Node Editor class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#-- ============================================== -->
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import java.io.IOException;
import java.util.List;
import ${datapackage}.*;
import ${nodepackage}.${ENTITYINFO.name}Node;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.form.*;
import uk.org.rlinsdale.nbpcglibrary.node.SaveHandler;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import uk.org.rlinsdale.nbpcglibrary.topcomponent.*;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field;
import static ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field.*;
import static uk.org.rlinsdale.nbpcglibrary.data.entity.EntityFieldChangeEventParams.CommonEntityField.ALL;
import uk.org.rlinsdale.nbpcglibrary.data.entity.EntityFieldChangeEventParams.CommonEntityField;

/**
 * NodeEditor for ${ENTITYINFO.name}Node.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${ENTITYINFO.name}NodeEditor",
iconBase = "com/famfamfam/www/silkicons/${ENTITYINFO.icon}.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_${ENTITYINFO.name}NodeEditor=${ENTITYINFO.name} Editor",
    "HINT_${ENTITYINFO.name}NodeEditor=This is the ${ENTITYINFO.name} Editor"
})
public final class ${ENTITYINFO.name}NodeEditor extends NodeEditorTopComponent<${ENTITYINFO.name}, ${ENTITYINFO.name}Field> {
    
    private final SaveHandler saveHandler = new FormSaveHandler();
    private final EntityFieldChangeListener entityfieldchangelistener;
    private final TitleChangeListener titlechangelistener;
    //
    private Form form;
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx"  >
<#if field.entryfield??>
    private PasswordField ${field.entryfield}Field;
<#elseif field.type=="reference" >
    private ${field.references}ChoiceField ${field.name}Field;
<#elseif field.type=="ref" || field.type=="rootref">
<#elseif field.type=="enum">
    private ${ENTITYINFO.name}${field.name?cap_first}ChoiceField ${field.name}Field;
<#else>
    private ${field.fieldclass} ${field.name}Field;
</#if>
</#if>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
    private boolean ${field.name}BadFormat=false;
</#if>
</#list>
  
    public ${ENTITYINFO.name}NodeEditor(${ENTITYINFO.name}Node node) {
        super(node,
                NbBundle.getMessage(${ENTITYINFO.name}NodeEditor.class, "CTL_${ENTITYINFO.name}NodeEditor"),
                NbBundle.getMessage(${ENTITYINFO.name}NodeEditor.class, "HINT_${ENTITYINFO.name}NodeEditor"));
        ${ENTITYINFO.name} e = node.getEntity();
        entityfieldchangelistener = new EntityFieldChangeListener("Editor:"+e.instanceDescription());
        titlechangelistener = new TitleChangeListener("Editor:"+e.instanceDescription());
    }

    @Override
    protected Form getForm() {
        setName("${ENTITYINFO.name}: " + node.getDisplayTitle());
        node.setSaveHandler(saveHandler);
        form = new Form("${ENTITYINFO.name}Editor",  new EditorFields());
        form.setAdditionalRules(entity);
        form.set();
        entity.addTitleListener(titlechangelistener);
        entity.addFieldListener(entityfieldchangelistener);
        return form;                 
    }

    @Override
    protected Form dropForm() {
<#list ENTITYINFO.field![] as field>
<#if field.type="reference">
        ${field.name}Field.closeChoices();
</#if>
</#list>
        form.save();
        entity.removeTitleListener(titlechangelistener);
        node.setSaveHandler(null);
        entity.removeFieldListener(entityfieldchangelistener);
        return form;
    }

    private class EditorFields extends FieldsDef {
        
        public EditorFields() {
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx" >
<#if field.entryfield??>
            add(${field.entryfield}Field = new PasswordField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}"));
<#elseif field.type=="reference" >
<#if field.optional??>
            add(${field.name}Field = new ${field.references}ChoiceField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}", true));
<#else>
            add(${field.name}Field = new ${field.references}ChoiceField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}", false));
</#if>
<#elseif field.type=="ref" || field.type = "rootref" >
<#elseif field.type == "enum" >
            add(${field.name}Field = new ${ENTITYINFO.name}${field.name?cap_first}ChoiceField(new ${field.name?cap_first}FieldBackingObject(), "${field.label}"));
<#else>
            add(${field.name}Field =  new ${field.fieldclass}(new ${field.name?cap_first}FieldBackingObject(), "${field.label}"));
</#if>
</#if>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
            ${field.name}Field.addRule(new ${field.name?cap_first}BadFormatRule());
</#if>
</#list>
        }

        @Override
        public boolean save() {
            return entity.save();
        }

        @Override
        public void cancel() {
        }
    }
<#list ENTITYINFO.field![] as field>
<#if field.type="reference">

    private class ${field.name?cap_first}FieldBackingObject implements ChoiceFieldBackingObject {
    
        @Override
        public List<String> getChoices() {
            return null;
        }

        @Override
        public void set(String value) {
           entity.set${field.name?cap_first}(${field.name}Field.convertTexttoEntity(value));
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}() != null ? entity.get${field.name?cap_first}().getDisplayTitle() : "";
        }
    }
<#elseif field.type="ref"  >
<#elseif field.type="enum" >

    private class ${field.name?cap_first}FieldBackingObject implements ChoiceFieldBackingObject {
    
        @Override
        public List<String> getChoices() {
            return null;
        }

        @Override
        public void set(String value) {
           entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }
    }
<#elseif field.type == "rootref" || field.type="idx" >
<#elseif field.type == "boolean" >

    private class ${field.name?cap_first}FieldBackingObject implements CheckboxFieldBackingObject {
    
    @Override
        public void set(Boolean value) {
             entity.set${field.name?cap_first}(value);
        }

        @Override
        public Boolean get() {
            return entity.get${field.name?cap_first}();
        }
    }
<#else>
<#if field.entryfield??>

    private class ${field.name?cap_first}FieldBackingObject implements EditableFieldBackingObject<String> {
    
    @Override
        public void set(String value) {
            if (!"".equals(val)) {
                entity.set${field.entryfield?cap_first}(value);
            }
        }

        @Override
        public String get() {
            return "";
        }
    }
<#else>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >

    private class ${field.name?cap_first}FieldBackingObject implements EditableFieldBackingObject<String> {
    
    @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}Text();
        }
    }
<#else>

    private class ${field.name?cap_first}FieldBackingObject implements EditableFieldBackingObject<String> {
    
    @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }
    }
</#if>
</#if>
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >

    private class ${field.name?cap_first}BadFormatRule  extends Rule {
        
        public ${field.name?cap_first}BadFormatRule() {
<#if field.type=="int" || field.type=="long">
            super("${field.name?cap_first} is not in Number format");
<#else>
            super("${field.name?cap_first} is not in Date format");
</#if>
        }
        
        @Override
        public boolean ruleCheck() {
            return !${field.name}BadFormat;
        }
    }
    
</#if>
</#list> 
    private class FormSaveHandler implements SaveHandler {

        @Override
        public void handleSave() throws IOException {
            form.save();
        }
    }

    private class EntityFieldChangeListener extends Listener<EntityFieldChangeEventParams<${ENTITYINFO.name}Field>> {

        public EntityFieldChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(EntityFieldChangeEventParams<${ENTITYINFO.name}Field> p) {
            CommonEntityField c = p.getCommon();
            if (c!= null ) {
                switch(c) {
                    case ALL:
                        form.set();
                        break;
                }
            }
            ${ENTITYINFO.name}Field f = p.get();
            if (f!= null) {
                switch (f) {
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx" >
<#if field.type!="rootref" >
                    case ${field.name?upper_case}:
<#if field.type="reference"  >
                        ${field.name}Field.updateFieldFromBackingObject();
<#elseif field.type="ref" >
<#elseif field.type=="int" || field.type=="long" ||field.type=="date" || field.type=="datetime">
                        ${field.name}Field.updateFieldFromBackingObject();
                        ${field.name}BadFormat=!p.isFormatOK();
<#else>
                        ${field.name}Field.updateFieldFromBackingObject();
</#if>
                        break;
</#if>
</#if>
</#list>
                }
            }
            form.checkRules();
            form.writeAllFailureMessages();
        }
    }

    private class TitleChangeListener extends Listener<SimpleEventParams> {

        public TitleChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(SimpleEventParams p) {
            setName("${ENTITYINFO.name}: " + node.getDisplayTitle());
        }
    }
}