<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Remote Command Processor -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign PSTORE = persistencestore[usepersistencestore] >
<#list PSTORE.persistenceentity![] as entity >
<#if entity.name = useentity >
package ${package};

import java.util.List;
import javax.ejb.Stateless;
import javax.json.JsonObject;
import javax.json.stream.JsonGenerator;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import uk.org.rlinsdale.nbpcglibrary.api.LogicException;
import uk.org.rlinsdale.nbpcglibrary.remotedb.IdandstampCommandProcessor;
import uk.org.rlinsdale.nbpcglibrary.json.JsonConversionException;

/**
 * Command Processor for the ${entity.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using script.xml.
 * Do not edit this file. Apply any changes to the definition file and
 * regenerate all files.)
 *
 * @author ${templateauthor}
 */
@Stateless
public class ${entity.name}CommandProcessor extends IdandstampCommandProcessor<${entity.name}> {

    @PersistenceContext(unitName = "${PSTORE.name}_PU")
    private EntityManager em;

    /**
     * Constructor
     */
    public ${entity.name}CommandProcessor() {
        super(${entity.name}.class);
    }
    
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    @Override
    protected ${entity.name} getNewEntity() {
        return new ${entity.name}();
    }

    @Override
    protected List<${entity.name}> queryByName(String field, Object value) {
        Query query;
switch (field) {
<#list entity.persistencefield![] as field>
            case "${field.name}":
                query = em.createNamedQuery("${entity.name}.findBy${field.name?cap_first}");
                query.setParameter("${field.name}", value);
                return query.getResultList();
</#list>
            default:
                throw new LogicException("Unknown filter field requested ("+field+")");
        }
    }

    @Override
    protected List<${entity.name}> queryAll() throws JsonConversionException {
        Query query = em.createNamedQuery("${entity.name}.findAll");
        return query.getResultList();
    }

    @Override
    protected Integer getPK(JsonObject command) {
        return command.getInt("pkey");
    }

    @Override
    protected void writePK(JsonGenerator generator, Integer pkey) {
       generator.write("pkey",pkey);
    }
}
</#if>
</#list>