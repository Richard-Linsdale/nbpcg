<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Remote Command Processor -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import java.util.List;
import javax.ejb.Stateless;
import javax.json.JsonValue;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import uk.org.rlinsdale.nbpcglibrary.remotedb.IdandstampCommandProcessor;
import uk.org.rlinsdale.nbpcglibrary.json.JsonConversionException;
import uk.org.rlinsdale.nbpcglibrary.json.JsonUtil;

/**
 * Command Processor for the ${ENTITYINFO.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using script.xml.
 * Do not edit this file. Apply any changes to the definition file and
 * regenerate all files.)
 *
 * @author ${templateauthor}
 */
@Stateless
public class ${ENTITYINFO.name}CommandProcessor extends IdandstampCommandProcessor<${ENTITYINFO.name}> {

    @PersistenceContext(unitName = "${ENTITYINFO.dbkey?cap_first}_PU")
    private EntityManager em;

    /**
     * Constructor
     */
    public ${ENTITYINFO.name}CommandProcessor() {
        super(${ENTITYINFO.name}.class);
    }
    
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    @Override
    protected ${ENTITYINFO.name} getNewEntity() {
        return new ${ENTITYINFO.name}();
    }

    @Override
    protected List<${ENTITYINFO.name}> queryByName(JsonValue field, JsonValue value) throws JsonConversionException {
        Query query;
switch (JsonUtil.getStringValue(field)) {
<#list ENTITYINFO.field![] as field>
<#if field.type = "rootref" | field.type = "idx" | field.type = "password">
<#elseif field.type = "ref" | field.type = "reference" | field.type = "int" | field.type = "long">
            case "${field.name}":
                query = em.createNamedQuery("${ENTITYINFO.name}.findBy${field.name?cap_first}");
                query.setParameter("${field.name}", JsonUtil.getIntegerValue(value));
                return query.getResultList();
<#elseif field.type = "boolean">
            case "${field.name}":
                query = em.createNamedQuery("${ENTITYINFO.name}.findBy${field.name?cap_first}");
                query.setParameter("${field.name}", JsonUtil.getBooleanValue(value));
                return query.getResultList();
<#else>
            case "${field.name}":
                query = em.createNamedQuery("${ENTITYINFO.name}.findBy${field.name?cap_first}");
                query.setParameter("${field.name}", JsonUtil.getStringValue(value));
                return query.getResultList();
</#if>
</#list>
            default:
                throw new JsonConversionException();
        }
    }

    @Override
    protected List<${ENTITYINFO.name}> queryAll() throws JsonConversionException {
        Query query = em.createNamedQuery("${ENTITYINFO.name}.findAll");
        return query.getResultList();
    }
}