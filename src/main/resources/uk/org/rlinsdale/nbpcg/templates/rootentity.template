<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk).
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Root entity class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign hassortchildren = false>
<#list ENTITYINFO.child as child>
<#assign hassortchildren = hassortchildren | child.sort?? >
<#assign haschildren = true >
</#list>
package ${package};

<#if hassortchildren >
import java.util.Comparator;
</#if>
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
<#list ENTITYINFO.child as child>
import static ${package}.${ENTITYINFO.name}.${ENTITYINFO.name}Field.${child.name?upper_case}S;
</#list>
<#if haschildren >
import uk.org.rlinsdale.nbpcglibrary.common.Listener;
</#if>
import uk.org.rlinsdale.nbpcglibrary.common.LogBuilder;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.data.entityreferences.*;
<#if hassortchildren >
import ${nodepackage}.*;
</#if>

/**
 * The ${ENTITYINFO.name} Object
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}. 
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@ServiceProvider(service = ${ENTITYINFO.name}.class)
public class ${ENTITYINFO.name} extends Entity {

    /**
     * the ${ENTITYINFO.name} field identifiers
     */
    public enum ${ENTITYINFO.name}Field {
<#list ENTITYINFO.child as child>
        /**
         * the ${child.name}s collection
         */
        ${child.name?upper_case}S,
</#list>
    }

<#list ENTITYINFO.child![] as child>
<#if child.orderable??>
    private final EntityIndexedReferenceSet<${child.references}, ${ENTITYINFO.name}Field> ${child.name}s;
<#elseif child.sort??>
    private final EntitySortedReferenceSet<${child.references}, ${ENTITYINFO.name}Field> ${child.name}s;
<#else>
    private final EntityReferenceSet<${child.references}, ${ENTITYINFO.name}Field> ${child.name}s;
</#if>
</#list>

    @Override
    public final String classDescription() {
        return LogBuilder.classDescription(this);
    }
    
    /**
     * Get the ${ENTITYINFO.name} entity.
     * 
     * @return the ${ENTITYINFO.name} entity
     */
    public static ${ENTITYINFO.name} getRoot() {
        return Lookup.getDefault().lookup(${ENTITYINFO.name}.class);
    }
    
    /**
     * Constructor.
     */
    public ${ENTITYINFO.name}() {
        super("${ENTITYINFO.name}");
<#list ENTITYINFO.child![] as child>
<#if child.orderable??>
        ${child.name}s = new EntityIndexedReferenceSet<>(classDescription()+">${child.name?cap_first}s", ${child.name?upper_case}S, ${child.references}.EM.class);
<#elseif child.sort??>
        ${child.name}s = new EntitySortedReferenceSet<>(classDescription()+">${child.name?cap_first}s", ${child.name?upper_case}S, new ${child.references}Comparator(), ${child.references}.EM.class);
<#else>
        ${child.name}s = new EntityReferenceSet<>(classDescription()+">${child.name?cap_first}s", ${child.name?upper_case}S, ${child.references}.EM.class);
</#if>
</#list>
    }
<#list ENTITYINFO.child![] as child>

    /**
     * Add a ${child.references} to the root's list
     *
     * @param e the ${child.name}
     */
    public void add${child.references}(${child.references} e) {
        ${child.name}s.add(e);
    }

    /**
     * Remove a ${child.references} from the root's list
     *
     * @param e the ${child.references}
     */
    public void remove${child.references}(${child.references} e) {
        ${child.name}s.remove(e);
    }

    /**
     * Remove a ${child.references} from the root's list
     *
     * @param e the ${child.references}
     */
    protected void removeInternal${child.references}(${child.references} e) {
        ${child.name}s.remove(e);
    }

    /**
     * Add set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void add${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.addSetListener(listener);
    }
    
    /**
     * remove set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void remove${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.removeSetListener(listener);
    }

    /**
     * Add set listener to requested collection field (set)
     *
     * @param listener the set change listener to be added
     */
    public static void add${child.references}sSetChangeListeners(Listener<SetChangeEventParams> listener) {
        getRoot().${child.name}s.addSetListener(listener);
    }

    /**
     * Remove set listener from requested collection field (set)
     *
     * @param listener the set change listener to be removed
     */
    public static void remove${child.references}sSetChangeListeners(Listener<SetChangeEventParams> listener) {
        getRoot().${child.name}s.removeSetListener(listener);
    }

    /**
     * Get the list of ${child.references}s
     *
     * @return the list of ${child.references}s
     */
    public List<${child.references}> get${child.references}s() { 
        return ${child.name}s.get();
    }
<#if child.orderable??>

   /**
     * Reorder the list of ${child.references}s
     *
     * @param perm the reordered index information
     */
    public void reorder${child.name?cap_first}s(int[] perm, int offsetMin, int offsetMax) {
        ${child.name}s.reorder(perm, offsetMin, offsetMax);
<#if entityinfo[child.references].ordercolumn?? >
        ${child.name}s.persistReorder();
</#if>
    }
</#if>
</#list>

        @Override
        protected final void _restoreState() {
<#list ENTITYINFO.child![] as child>
            ${child.name}s.restoreState();
</#list>
        }
<#list ENTITYINFO.child![] as child>
<#if child.sort??>

    private class ${child.references}Comparator implements Comparator<${child.references}> {
        @Override
        public int compare(${child.references} o1, ${child.references} o2) {
            return ${ENTITYINFO.name}NodeChildFactory.${child.references}NodeDisplay.getSort(o1,"undefined").compareTo(${ENTITYINFO.name}NodeChildFactory.${child.references}NodeDisplay.getSort(o2,"undefined"));
        }
    }
</#if>
</#list>
}