<#--
 * Copyright (C) 2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Entity Source class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#-- ============================================== -->
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

<#assign needListImport = "no" >
<#assign needArraysImport = "no" >
<#assign needDateOnlyImport = "no" >
<#assign needTimestampImport = "no" >
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type="reference" || field.type="reference" || field.type="enum"  || (field.choicemethod??) >
<#assign needListImport = "yes" >
</#if>
<#if field.type="enum"  >
<#assign needArraysImport = "yes" >
</#if>
<#if field.type="date"  >
<#assign needDateOnlyImport = "yes" >
</#if>
<#if field.type="datetime"  >
<#assign needTimestampImport = "yes" >
</#if>
</#if>
</#list>
<#if needArraysImport = "yes">
import java.util.Arrays;
</#if>
<#if needListImport = "yes">
import java.util.List;
</#if>
import ${datapackage}.*;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
import uk.org.rlinsdale.nbpcglibrary.form.*;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field;
import static ${datapackage}.${ENTITYINFO.name}.${ENTITYINFO.name}Field.*;
<#if needDateOnlyImport = "yes">
import uk.org.rlinsdale.nbpcglibrary.api.DateOnly;
</#if>
<#if needTimestampImport = "yes">
import uk.org.rlinsdale.nbpcglibrary.api.Timestamp;
</#if>

/**
 * Field creation and Datasources for ${ENTITYINFO.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public final class ${ENTITYINFO.name}Source implements EntitySource<${ENTITYINFO.name}> {
    
    private final ${ENTITYINFO.name} entity;
    private final FieldChangeListener entityfieldchangelistener;
    private final ${ENTITYINFO.name}EntityRules entityrules = new ${ENTITYINFO.name}EntityRules();
    //
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx"  >
<#if field.entryfield??>
    private EditableField ${field.name}Field;
<#elseif field.type=="reference" >
    private EditableField ${field.name}Field;
<#elseif field.type=="ref" || field.type=="rootref">
<#elseif field.type=="enum">
    private  EditableField ${field.name}Field;
<#else>
<#if !(field.hidden??) >
<#if field.choicemethod??>
    private  EditableField ${field.name}Field;
<#else>
    private EditableField ${field.name}Field;
</#if>
</#if>
</#if>
</#if>
</#list>
  
    public ${ENTITYINFO.name}Source(${ENTITYINFO.name} entity) {
        this.entity = entity;
        entityfieldchangelistener = new FieldChangeListener(entity.instanceDescription());
    }

    @Override
    public void opened() {
        entity.addFieldListener(entityfieldchangelistener);
    }

    @Override
public void closed() {
<#list ENTITYINFO.field![] as field>
<#if field.type="reference">
        ${field.name}Field.closeChoices();
</#if>
</#list>
        entity.removeFieldListener(entityfieldchangelistener);
    }

    @Override
    public ${ENTITYINFO.name} getEntity() {
        return entity;
    }

    @Override
    public FormFields getFormFields() {
        return new Fields(entityrules);
    }

    
    private class Fields extends FormFields {
        
        public Fields(FormRules formrules) {
            super(formrules);
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx" >
<#if field.entryfield??>
            add(${field.name}Field = FieldBuilder.stringType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).passwordField());
<#elseif field.type=="reference" >
<#if field.optional??>
            add(${field.name}Field = FieldBuilder.entityType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).nullselectionallowed().entityChoiceField());
<#else>
            add(${field.name}Field = FieldBuilder.entityType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).entityChoiceField());
</#if>
<#elseif field.type=="ref" || field.type = "rootref" >
<#elseif field.type == "enum" >
            add(${field.name}Field = FieldBuilder.stringType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).choiceField());
<#else>
<#if !(field.hidden??) >
<#if field.choicemethod??>
            add(${field.name}Field = FieldBuilder.entityType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).entityChoiceField());
<#elseif field.type == "int">
            add(${field.name}Field =  FieldBuilder.integerType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).integerField());
<#elseif field.type == "long">
            add(${field.name}Field =  FieldBuilder.longType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).longField());
<#elseif field.type == "date">
            add(${field.name}Field =  FieldBuilder.dateType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).dateField());
<#elseif field.type == "datetime">
            add(${field.name}Field =  FieldBuilder.datetimeType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).datetimeField());
<#elseif field.type == "boolean">
            add(${field.name}Field =  FieldBuilder.booleanType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).checkboxField());
<#else>
            add(${field.name}Field =  FieldBuilder.stringType().label("${field.label}").
                    fieldsource(new ${field.name?cap_first}FieldSource()).textField());
</#if>
</#if>
</#if>
</#if>
</#list>
        }

        @Override
        public boolean save() {
            return entity.save();
        }
    }

    @Override
    public RowFields getRowFields() {
        return new Row(entityrules);
    }

    private class Row extends RowFields {
        
        public Row(FormRules rowrules) {
            super(rowrules);
<#list ENTITYINFO.field![] as field>
<#if field.type!="idx" >
<#if field.entryfield??>
            add(${field.entryfield}Field = FieldBuilder.stringType().fieldsource(new ${field.name?cap_first}FieldSource()).passwordField());
<#elseif field.type=="reference" >
<#if field.optional??>
            add(${field.name}Field = FieldBuilder.entityType().fieldsource(new ${field.name?cap_first}FieldSource()).nullselectionallowed().entityChoiceField());
<#else>
            add(${field.name}Field = FieldBuilder.entityType().fieldsource(new ${field.name?cap_first}FieldSource()).entityChoiceField());
</#if>
<#elseif field.type=="ref" || field.type = "rootref" >
<#elseif field.type == "enum" >
            add(${field.name}Field = FieldBuilder.stringType().fieldsource(new ${field.name?cap_first}FieldSource()).choiceField());
<#else>
<#if !(field.hidden??) >
<#if field.choicemethod??>
            add(${field.name}Field = FieldBuilder.entityType().fieldsource(new ${field.name?cap_first}FieldSource()).entityChoiceField());
<#elseif field.type == "int">
            add(${field.name}Field =  FieldBuilder.integerType().fieldsource(new ${field.name?cap_first}FieldSource()).integerField());
<#elseif field.type == "long">
            add(${field.name}Field =  FieldBuilder.longType().fieldsource(new ${field.name?cap_first}FieldSource()).longField());
<#elseif field.type == "date">
            add(${field.name}Field =  FieldBuilder.dateType().fieldsource(new ${field.name?cap_first}FieldSource()).dateField());
<#elseif field.type == "datetime">
            add(${field.name}Field =  FieldBuilder.datetimeType().fieldsource(new ${field.name?cap_first}FieldSource()).datetimeField());
<#elseif field.type == "boolean">
            add(${field.name}Field =  FieldBuilder.booleanType().fieldsource(new ${field.name?cap_first}FieldSource()).checkboxField());
<#else>
            add(${field.name}Field =  FieldBuilder.stringType().fieldsource(new ${field.name?cap_first}FieldSource()).textField());
</#if>
</#if>
</#if>
</#if>
</#list>
        }

        @Override
        public boolean save() {
            return entity.save();
        }
    }

    private class ${ENTITYINFO.name}EntityRules implements FormRules {

        @Override
        public boolean checkRules() {
            return entity.getEntityRules().checkRules();
        }

        @Override
        public String getErrorMessages() {
            return entity.getEntityRules().getErrorMessages();
        }
    }

<#list ENTITYINFO.field![] as field>
<#if field.type="reference">

    private class ${field.name?cap_first}FieldSource extends ChoiceFieldSource<Entity> {
    
        @Override
        public List<Entity> getChoices() {
            return ${field.references}.getAll${field.references}s();
        }

        @Override
        public void set(Entity value) {
            entity.set${field.name?cap_first}((${field.references})value);
        }

        @Override
        public ${field.references} get() {
            return entity.get${field.name?cap_first}();
        }

    }
<#elseif field.type="ref"  >
<#elseif field.type="enum" >

    private class ${field.name?cap_first}FieldSource extends ChoiceFieldSource<String> {
    
        @Override
        public List<String> getChoices() {
            return Arrays.asList(${field.values?replace("'","\"")});
        }

        @Override
        public void set(String value) {
           entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }
    }
<#elseif field.type == "rootref" || field.type="idx" >
<#elseif field.type == "boolean" >

    private class ${field.name?cap_first}FieldSource extends FieldSource<Boolean> {
    
    @Override
        public void set(Boolean value) {
             entity.set${field.name?cap_first}(value);
        }

        @Override
        public Boolean get() {
            return entity.get${field.name?cap_first}();
        }
    }
<#elseif field.type = "password" >

    private class ${field.name?cap_first}FieldSource extends FieldSource<String> {
    
        @Override
        public void set(String value) {
                entity.set${field.entryfield?cap_first}(value);
        }

        @Override
        public String get() {
            return "";
        }

        @Override
        public Rules getRules() {
            return entity.get${field.name?cap_first}Rules();
        }
    }
<#elseif field.type=="int" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldSource extends FieldSource<Integer> {
    
    @Override
        public void set(Integer value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public Integer get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public Rules getRules() {
            return entity.get${field.name?cap_first}Rules();
        }
    }
</#if>
<#elseif field.type=="long" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldSource extends FieldSource<Long> {
    
    @Override
        public void set(Long value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public Long get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public Rules getRules() {
            return entity.get${field.name?cap_first}Rules();
        }
    }
</#if>
<#elseif field.type == "date">
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldSource extends FieldSource<DateOnly> {
    
    @Override
        public void set(DateOnly value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public DateOnly get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public Rules getRules() {
            return entity.get${field.name?cap_first}Rules();
        }
    }
</#if>
<#elseif field.type == "datetime" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldSource extends FieldSource<Timestamp> {
    
    @Override
        public void set(Timestamp value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public Timestamp get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public Rules getRules() {
            return entity.get${field.name?cap_first}Rules();
        }
    }
</#if>
<#else>
<#if !(field.hidden??) >
<#if field.choicemethod??>

    private class ${field.name?cap_first}FieldSource extends FieldSource<String> {
    
        @Override
        public List<String> getChoices() {
            return ${field.choicemethod}();
        }

        @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }
    }
<#else>

    private class ${field.name?cap_first}FieldSource extends FieldSource<String> {
    
    @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public Rules getRules() {
            return entity.get${field.name?cap_first}Rules();
        }
    }
</#if>
</#if>
</#if>
</#list>

    private class FieldChangeListener extends Listener<EntityFieldChangeEventParams<${ENTITYINFO.name}Field>> {

        public FieldChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(EntityFieldChangeEventParams<${ENTITYINFO.name}Field> p) {
            ${ENTITYINFO.name}Field f = p.get();
            if (f== null) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden?? || field.type=="idx" || field.type=="rootref" || field.type=="ref")>
                ${field.name}Field.updateFieldFromSource(false);
</#if>
</#list>
            } else {
                switch (f) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden?? || field.type=="idx" || field.type=="rootref" || field.type=="ref")>
                    case ${field.name?upper_case}:
                        ${field.name}Field.updateFieldFromSource(false);
                        break;
</#if>
</#list>
                }
            }
        }
    }
}