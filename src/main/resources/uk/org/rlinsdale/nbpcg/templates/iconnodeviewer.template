<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for IconNode Viewer class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign NODEINFO = nodeinfo[usenodeinfo] >
package ${package};

import uk.org.rlinsdale.nbpcglibrary.node.nodes.NameChangeListenerParams;
import uk.org.rlinsdale.nbpcglibrary.common.Listener;
import uk.org.rlinsdale.nbpcglibrary.topcomponent.ExplorerTopComponent;
import ${nodepackage}.${NODEINFO.parentnodeandfactory};
import org.openide.explorer.view.IconView;
import org.openide.nodes.AbstractNode;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * IconNodeViewer for ${NODEINFO.name}.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}. 
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${NODEINFO.name}Viewer", iconBase = "com/famfamfam/www/silkicons/${NODEINFO.icon}.png", persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_${NODEINFO.name}Viewer=${NODEINFO.label}",
    "HINT_${NODEINFO.name}Viewer=Viewer for ${NODEINFO.label}"
})
public final class ${NODEINFO.name}Viewer extends ExplorerTopComponent {

    private final ${NODEINFO.parentnode} node;
    private final TitleChangeListener titlechangelistener = new TitleChangeListener("${NODEINFO.name}Viewer/Title");

    public ${NODEINFO.name}Viewer(${NODEINFO.parentnode} n) {
        super("${NODEINFO.name} Viewer",
                new IconView(),
                NbBundle.getMessage(${NODEINFO.name}Viewer.class, "CTL_${NODEINFO.name}Viewer"),
                NbBundle.getMessage(${NODEINFO.name}Viewer.class, "HINT_${NODEINFO.name}Viewer"));
        node = n;
    }

    @Override
    public AbstractNode getRootContextNode() {
        setName("${NODEINFO.parententity}: " + node.getDisplayTitle());
        node.addNameListener(titlechangelistener);
        return node;
    }

    @Override
    public void dropRootContextNode() {
        node.removeNameListener(titlechangelistener);
    }

    private class TitleChangeListener extends Listener<NameChangeListenerParams> {
        
        public TitleChangeListener(String name) {
            super(name);
        }
        
        @Override
        public void action(NameChangeListenerParams p) {
            setName("${NODEINFO.parententity}: " + p.get());
        }
    }
}