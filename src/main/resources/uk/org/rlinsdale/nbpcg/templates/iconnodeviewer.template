<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for IconNode Viewer class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import java.util.Collection;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import uk.org.rlinsdale.nbpcglibrary.topcomponent.ExplorerTopComponent;
import uk.org.rlinsdale.nbpcglibrary.common.LogBuilder;
import ${nodepackage}.${ENTITYINFO.parentname}IconNode;
import org.openide.explorer.view.IconView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * IconNodeViewer for ${ENTITYINFO.name}IconNode.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}. 
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${ENTITYINFO.name}IconNodeViewer", iconBase = "com/famfamfam/www/silkicons/${ENTITYINFO.icon}.png", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "uk.org.rlinsdale.photogallery.topcomponents.${ENTITYINFO.name}IconNodeViewer")
@ActionReference(path = "Menu/Window")
@TopComponent.OpenActionRegistration(displayName = "#CTL_${ENTITYINFO.name}IconNodeViewer",
        preferredID = "${ENTITYINFO.name}IconNodeViewer")
@Messages({
    "CTL_${ENTITYINFO.name}IconNodeViewer=${ENTITYINFO.parentname} ${ENTITYINFO.name}s",
    "HINT_${ENTITYINFO.name}IconNodeViewer=Viewer for ${ENTITYINFO.parentname} ${ENTITYINFO.name}s"
})
public final class ${ENTITYINFO.name}IconNodeViewer extends ExplorerTopComponent {

    private ${ENTITYINFO.parentname}IconNodeChange change = null;

    public ${ENTITYINFO.name}IconNodeViewer() {
        super("${ENTITYINFO.name}IconNode Viewer",
                new IconView(),
                NbBundle.getMessage(${ENTITYINFO.name}IconNodeViewer.class, "CTL_${ENTITYINFO.name}IconNodeViewer"),
                NbBundle.getMessage(${ENTITYINFO.name}IconNodeViewer.class, "HINT_${ENTITYINFO.name}IconNodeViewer"));
    }

 @Override
    public String instanceDescription() {
        return LogBuilder.instanceDescription(this);
    }
    
    @Override
    public Node getRootContextNode() {
        setName("${ENTITYINFO.parentname}: no selection");
        change = new ${ENTITYINFO.parentname}IconNodeChange();
        return Node.EMPTY;
    }
    
    @Override
    public void dropRootContextNode() {
       change.terminate();
        change = null;
    }

    private class ${ENTITYINFO.parentname}IconNodeChange implements LookupListener {

        private final Lookup.Result<${ENTITYINFO.parentname}IconNode> result;

        @SuppressWarnings("LeakingThisInConstructor")
        public ${ENTITYINFO.parentname}IconNodeChange() {
            result = Utilities.actionsGlobalContext().lookupResult(${ENTITYINFO.parentname}IconNode.class);
            result.addLookupListener(this);
            result.allItems();
        }

        public void terminate() {
            result.removeLookupListener(this);
        }

        @Override
        public void resultChanged(LookupEvent lookupEvent) {
            Collection<? extends ${ENTITYINFO.parentname}IconNode> allEvents = result.allInstances();
            if (!allEvents.isEmpty()) {
                ${ENTITYINFO.parentname}IconNode node = allEvents.iterator().next();
                setName("Album: " + node.getDisplayTitle());
                ${ENTITYINFO.name}IconNodeViewer.this.resetRootContextNode(node);
            }
        }
    }
}