<#--
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Entity class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign PARENTENTITYINFO = entityinfo[ENTITYINFO.parentname] >
<#assign hassortchildren = false >
<#list ENTITYINFO.child![] as child>
<#assign hassortchildren = hassortchildren | child.sort = "yes" >
</#list>
package ${package};

import java.text.MessageFormat;
<#if ENTITYINFO.parentname??>
import java.util.ArrayList;
</#if>
<#if hassortchildren>
import java.util.Comparator;
</#if>
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
<#list ENTITYINFO.field![] as field>
<#if field.type = "password" >
import static ${field.passwordsupport}.*;
</#if>
</#list>
import static ${package}.${ENTITYINFO.name}.${ENTITYINFO.name}Field;
import uk.org.rlinsdale.nbpcglibrary.api.BadFormatException;
import uk.org.rlinsdale.nbpcglibrary.api.EntityFields;
import uk.org.rlinsdale.nbpcglibrary.api.EntityPersistenceProvider;
import uk.org.rlinsdale.nbpcglibrary.api.EntityPersistenceProviderManager;
import uk.org.rlinsdale.nbpcglibrary.api.Timestamp;
import uk.org.rlinsdale.nbpcglibrary.common.*;
import uk.org.rlinsdale.nbpcglibrary.data.entity.*;
<#assign er_written = "n" >
<#list ENTITYINFO.field![] as field >
<#if (field.type = "reference" || field.type = "ref") && er_written = "n" >
import uk.org.rlinsdale.nbpcglibrary.data.entityreferences.EntityReference;
<#assign er_written = "y" >
</#if>
</#list>
<#assign ers_written = "n" >
<#assign erss_written = "n" >
<#assign ersi_written = "n" >
<#list ENTITYINFO.child![] as child >
<#if child.orderable = "yes">
<#if ersi_written = "n" >
import uk.org.rlinsdale.nbpcglibrary.data.entityreferences.EntityIndexedReferenceSet;
<#assign ersi_written = "y" >
</#if>
<#elseif child.sort = "yes" >
<#if erss_written = "n" >
import uk.org.rlinsdale.nbpcglibrary.data.entityreferences.EntitySortedReferenceSet;
<#assign erss_written = "y" >
</#if>
<#else>
<#if ers_written = "n" >
import uk.org.rlinsdale.nbpcglibrary.data.entityreferences.EntityReferenceFilterSet;
<#assign ers_written = "y" >
</#if>
</#if>
</#list>

/**
 * The ${ENTITYINFO.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
<#if ENTITYINFO.ordercolumn??>
public class ${ENTITYINFO.name} extends EntityIndexed<${ENTITYINFO.pkeytype},${ENTITYINFO.name},${ENTITYINFO.parentname}, ${ENTITYINFO.name}Field> {
<#else>
public class ${ENTITYINFO.name} extends Entity<${ENTITYINFO.pkeytype},${ENTITYINFO.name},${ENTITYINFO.parentname}, ${ENTITYINFO.name}Field> {
</#if>

    /**
     * the ${ENTITYINFO.name} field identifiers
     */
    public enum ${ENTITYINFO.name}Field {
<#list ENTITYINFO.field![] as field >
<#if !(field.hidden??) >
<#if field.type != "rootref" >
        /**
         * the ${field.name} field
         */
        ${field.name?upper_case},
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
        /**
         * the ${child.name}s collection
         */
        ${child.name?upper_case}S,
</#list>
    }

    private final Rules entityRules = new Rules();
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref">
    private final EntityReference<${PARENTENTITYINFO.pkeytype},${field.references}, ${PARENTENTITYINFO.parentname}> ${field.name};
<#elseif field.type == "reference">
<#assign FIELDENTITY = entityinfo[field.name?cap_first]>
    private final EntityReference<${FIELDENTITY.pkeytype},${field.references}, ${FIELDENTITY.parentname}> ${field.name};
<#elseif field.type == "rootref" >
    private final ${field.references} ${field.name};
<#elseif field.type == "idx">
<#else>
    private ${field.javatype} ${field.name}${field.initialisation};
<#if !(field.hidden??) >
    private ${field.javatype} ${field.name}Original;
    private final Rules ${field.name}Rules = new Rules();
</#if>
<#if field.type == "password" >
    private final PasswordRule passwordrule;
<#elseif field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
<#if !(field.hidden??) >
    private boolean ${field.name}BadFormat=false;
</#if>
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
<#assign CHILDENTITY = entityinfo[child.name?cap_first]>
<#if child.orderable = "yes">
    private final EntityIndexedReferenceSet<${CHILDENTITY.pkeytype},${child.references}, ${ENTITYINFO.name}> ${child.name}s;
<#elseif child.sort = "yes" >
    private final EntitySortedReferenceSet<${CHILDENTITY.pkeytype},${child.references}, ${ENTITYINFO.name}> ${child.name}s;
<#else>
    private final EntityReferenceFilterSet<${CHILDENTITY.pkeytype},${child.references}, ${ENTITYINFO.name}> ${child.name}s;
</#if>
</#list>

    /**
     * Constructor - ${ENTITYINFO.name}.
     * @param id the unique id for this entity
     * @param em - the entity manager for this entity type
     */
    public ${ENTITYINFO.name}(int id, ${ENTITYINFO.name}.EM em) {
        super("${ENTITYINFO.name}["+Integer.toString(id)+"]", "${ENTITYINFO.icon}", em);
        this.id = id;
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
<#assign needreflistener = "no">
<#list ENTITYINFO.displaynameformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign needreflistener  = "yes" >
</#if>
</#list>
</#list>
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign needreflistener = "yes" >
</#if>
</#list>
</#list>
</#if>
<#if needreflistener = "yes" >
        ${field.name} = new EntityReference<>("${ENTITYINFO.name}>${field.name?cap_first}", ${field.references}.getEM(), new ReferencedEntityTitleChangeListener("${ENTITYINFO.name}>${field.name?cap_first}"));
<#else>
        ${field.name} = new EntityReference<>("${ENTITYINFO.name}>${field.name?cap_first}", ${field.references}.getEM());
</#if>
<#if !field.optional??>
        addRule(${field.name}.getDefinedRule());
</#if>
<#elseif field.type == "rootref">
        root = ${field.references}.get();
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type = "String" >
        addRule(${field.name}Rules, new ${field.name?cap_first}MinRule());
        addRule(${field.name}Rules, new ${field.name?cap_first}MaxRule());
<#if field.unique??>
        addRule(${field.name}Rules, new ${field.name?cap_first}UniqueRule());
</#if>
<#elseif field.type = "int" || field.type = "long">
<#if field.min??>
        addRule(${field.name}Rules, new ${field.name?cap_first}MinRule());
</#if>
<#if field.max??>
        addRule(${field.name}Rules, new ${field.name?cap_first}MaxRule());
</#if>
        addRule(${field.name}Rules, new ${field.name?cap_first}BadFormatRule());
<#elseif field.type = "date" || field.type = "datetime" >
<#if field.future??>
        addRule(${field.name}Rules, new ${field.name?cap_first}FutureRule()); 
</#if>
<#if field.past??>
        addRule(${field.name}Rules, new ${field.name?cap_first}PastRule());
</#if>
        addRule(${field.name}Rules, new ${field.name?cap_first}BadFormatRule());
<#elseif field.type = "password" >
        addRule(${field.name}Rules, passwordrule = new PasswordRule());
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
<#if child.orderable = "yes" >
        ${child.name}s = new EntityIndexedReferenceSet<>(instanceDescription()+">${child.references}s", "${child.dbname}", getId(), ${child.references}.EM.class);
<#elseif child.sort = "yes" >
        ${child.name}s = new EntitySortedReferenceSet<>(instanceDescription()+">${child.references}s", new ${child.references}Comparator(), "${child.dbname}", getId(), ${child.references}.EM.class);
<#else>
        ${child.name}s = new EntityReferenceFilterSet<>(instanceDescription()+">${child.references}s", "${child.dbname}", getId(), ${child.references}.EM.class);
</#if>
<#if child.min??>
        addRule(${child.name}s.getMinRule(${child.min}));
</#if>
<#if child.max??>
        addRule(${child.name}s.getMaxRule(${child.max}));
</#if>
</#list>
        checkRulesAtLoad();
    }

    @Override
    public boolean isPersistent() {
        return id > 0;
    }

    @Override
    public final ${ENTITYINFO.pkeytype} getPK() {
        return getId();
    }

    /**
     * Get all rules for this entity
     * @return the set of rules
     */
    public final Rules getEntityRules() {
        return entityRules;
    }
<#assign writeDescription = "yes" >
<#list ENTITYINFO.field![] as field>
<#if writeDescription = "yes">
<#if  field.type = "String" || field.type = "enum" || field.type = "password">

    @Override
    public final String instanceDescription() {
        return "".equals(${field.name}) ?
                LogBuilder.instanceDescription(this, Integer.toString(getId())):
                LogBuilder.instanceDescription(this, Integer.toString(getId())+"-"+${field.name});
    }
<#assign writeDescription = "no" >
</#if>
<#if field.type = "boolean" || field.type = "int" || field.type = "long" || field.type = "date" || field.type = "datetime"  >
    
    @Override
    public final String instanceDescription() {
        return LogBuilder.instanceDescription(this, Integer.toString(getId()));
    }
<#assign writeDescription = "no" >
</#if>
<#if field.type = "reference">

    @Override
    public final String instanceDescription() {
        if (${field.name} == null) {
            return LogBuilder.instanceDescription(this, Integer.toString(getId()));
        }
        ${field.references} e = ${field.name}.getNoLoad();
        return e != null?
                LogBuilder.instanceDescription(this, Integer.toString(getId()) + ":" + e.instanceDescription()):
                LogBuilder.instanceDescription(this, Integer.toString(getId()));
    }
<#assign writeDescription = "no" >
</#if>
</#if>
</#list>

<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type = "String" >
    private class ${field.name?cap_first}MinRule extends Rule {

        public ${field.name?cap_first}MinRule() {
            super("${field.name}  too short");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.length() >= ${field.min};
        }
    }

    private class ${field.name?cap_first}MaxRule extends Rule {

        public ${field.name?cap_first}MaxRule() {
            super("${field.name} too long");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.length() <= ${field.max};
        }
    }

<#if field.unique?? >
    private class ${field.name?cap_first}UniqueRule extends UniqueRule {

        public ${field.name?cap_first}UniqueRule() {
            super("${field.name} is not unique");
        }

        @Override
        protected boolean ruleCheck() {
<#list ENTITYINFO.field![] as pref>
<#if pref.type="ref" || pref.type="rootref" >
            return getParent().get${ENTITYINFO.name}s().stream().noneMatch((e) -> (e != ${ENTITYINFO.name}.this && e.get${field.name?cap_first}().equals(${field.name})));
</#if>
</#list>
        }
    }

</#if>
<#elseif field.type = "int" || field.type = "long" >
<#if field.min??>
    private class ${field.name?cap_first}MinRule extends Rule {

        public ${field.name?cap_first}MinRule() {
            super("${field.name} is set below minimum");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name} >= ${field.min};
        }
    }

</#if>
<#if field.max??>
    private class ${field.name?cap_first}MaxRule extends Rule {

        public ${field.name?cap_first}MaxRule() {
            super("${field.name} is set above maximum");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name} <= ${field.max};
        }
    }

</#if>
<#elseif field.type = "date" || field.type = "datetime" >
<#if field.future??>
    private class ${field.name?cap_first}FutureRule extends Rule {

        public ${field.name?cap_first}FutureRule() {
            super("${field.name} must be in the future");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.compareTo() != -1;
        }
    }

</#if>
<#if field.past??>
    private class ${field.name?cap_first}PastRule extends Rule {

        public ${field.name?cap_first}PastRule() {
            super("${field.name} must be in the past");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.compareTo() != 1;
        }
    }

</#if>
<#elseif field.type = "password" >
    private class PasswordRule extends Rule {

        private boolean wasPasswordValid = false;

        public PasswordRule() {
            super("password is not valid");
        }

        @Override
        public boolean ruleCheck() {
            return wasPasswordValid;
        }

        public boolean checkPassword(PasswordStrength strength, String password) {
            return wasPasswordValid = passwordCheck(strength, password);
        }

        public void encodedPasswordLoaded() {
            wasPasswordValid = true;
        }
    }

</#if>
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if field.type = "ref" >

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} getParent() {
        return ${field.name}.get();
    }

    /**
     * Set the parent (${field.name?cap_first}) Entity associated with this entity.
     * Called from the parent entity as part of the add${ENTITYINFO.name} method
     *
     * @param e the parent ${field.name} entity
     */
    protected void linkToParent(${field.references} e) {
        ensureEditing();
        if (${field.name}.set(e.getPK()) ) {
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
            fireNameAndOrTitleChangeOn${field.name?cap_first}();
        }
    }

    /**
     * Clear the parent (${field.name?cap_first}) Entity associated with this entity.
     * Called from the parent entity as part of the remove${ENTITYINFO.name} method
     */
    protected void unlinkFromParent() {
        ensureEditing();
        if (${field.name}.set() ) {
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
            fireNameAndOrTitleChangeOn${field.name?cap_first}();
        }
    }
<#elseif field.type = "reference" >

    /**
     * Get the ${field.name?cap_first} Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} get${field.name?cap_first}() {
        return ${field.name}.get();
    }

    /**
     * Set the ${field.name?cap_first} Entity associated with this entity.
     *
     * @param e the ${field.name} entity
     */
    public void set${field.name?cap_first}(${field.references} e) {
        if (e == null) {
            if (${field.name}.getPK() != null) {
                ensureEditing();
                if (${field.name}.set()) {
                    fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                    fireNameAndOrTitleChangeOn${field.name?cap_first}();
                }
            }
        } else {
            if (!e.getPK().equals(${field.name}.getPK())) {
                ensureEditing();
                if (${field.name}.set(e.getPK())) {
                    fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                    fireNameAndOrTitleChangeOn${field.name?cap_first}();
                }
            }
        }
    }
<#elseif field.type = "rootref" >

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} getParent() {
        return root;
    }
<#elseif field.type == "idx" >
<#else>
<#if !(field.hidden??) >

    /**
     * Get the ${field.name} field rules.
     *
     * @return the ${field.name}
     */
    public Rules get${field.name?cap_first}Rules() {
        return ${field.name}Rules;
    }
</#if>

    /**
     * Get the ${field.name}.
     *
     * @return the ${field.name}
     */
    public final ${field.javatype} get${field.name?cap_first}() {
        return ${field.name};
    }
<#if field.type == "int" >

    /**
     * Get the ${field.name} in String format.
     *
     * @return the ${field.name}
     */
    public String get${field.name?cap_first}Text() {
        return Integer.toString(${field.name});
    }
<#elseif field.type == "long" >

    /**
     * Get the ${field.name} in String format.
     *
     * @return the ${field.name}
     */
    public String get${field.name?cap_first}Text() {
        return Long.toString(${field.name});
    }
<#elseif field.type == "date" >

    /**
     * Get the ${field.name} in String format.
     *
     * @return the ${field.name}
     */
    public String get${field.name?cap_first}Text() {
        return ${field.name}.toString();
    }
<#elseif field.type == "datetime" >

    /**
     * Get the ${field.name} in String format.
     *
     * @return the ${field.name}
     */
    public String get${field.name?cap_first}Text() {
        return ${field.name}.toString();
    }
</#if>
<#if field.type = "password" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.entryfield} the ${field.entryfield}
     */
    public void set${field.entryfield?cap_first}(String ${field.entryfield}) {
        if (passwordrule.checkPassword(PasswordStrength.${field.passwordstrength?upper_case}, password)) {
            String encoded = encode(${field.entryfield});
            if (!this.${field.name}.equals(encoded)) {
                ensureEditing();
                this.${field.name} = encoded;
                fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                fireNameAndOrTitleChangeOn${field.name?cap_first}();
            }
        }
    }
<#else>
<#if !(field.hidden??) >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.name} the ${field.name}
     */
    public void set${field.name?cap_first}(${field.javatype} ${field.name}) {
<#if field.type == "String" | field.type == "enum" >
        if (!this.${field.name}.equals(${field.name})) {
<#elseif field.type == "date" || field.type == "datetime" >
        if (!this.${field.name}.toString().equals(${field.name}.toString())) {
<#else>
        if (this.${field.name} != ${field.name}) {
</#if>
            ensureEditing();
            this.${field.name} = ${field.name};
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
            ${field.name}BadFormat = false;
</#if>
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
            fireNameAndOrTitleChangeOn${field.name?cap_first}();
        }
    }
</#if>
</#if>
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
<#if !(field.hidden??) >
    
    private class ${field.name?cap_first}BadFormatRule extends Rule {
        
        public ${field.name?cap_first}BadFormatRule() {
<#if field.type = "int" || field.type=="long" >
            super("${field.name?cap_first} is not in Number format");
<#elseif field.type == "date" >
            super("${field.name?cap_first} is not in Date format");
<#else>
            super("${field.name?cap_first} is not in Date Time format");
</#if>
        }
        
        @Override
        public boolean ruleCheck() {
            return !${field.name}BadFormat;
        }
    }
<#if field.type == "int" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.name}Text the ${field.name}
     */
    public void set${field.name?cap_first}(String ${field.name}Text) {
        int new${field.name};
        try {
            new${field.name}=Integer.parseInt(${field.name}Text);
        } catch (NumberFormatException ex) {
            ${field.name}BadFormat = true;
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case}, false);
            return;
        } 
        set${field.name?cap_first}(new${field.name});
        ${field.name}BadFormat = false;
        fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
        fireNameAndOrTitleChangeOn${field.name?cap_first}();
    }
<#elseif field.type == "long" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.name}Text the ${field.name}
     */
    public void set${field.name?cap_first}(String ${field.name}Text) {
        long new${field.name};
        try {
            new${field.name}=Long.parseLong(${field.name}Text);
        } catch (NumberFormatException ex) {
            ${field.name}BadFormat = true;
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case}, false);
            return;
        } 
        set${field.name?cap_first}(new${field.name});
        ${field.name}BadFormat = false;
        fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
        fireNameAndOrTitleChangeOn${field.name?cap_first}();
    }
<#elseif field.type == "date" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.name}Text the ${field.name}
     */
    public void set${field.name?cap_first}(String ${field.name}Text) {
        DateOnly new${field.name};
        try {
            new${field.name}=new DateOnly(${field.name}Text);
        } catch (BadFormatException ex) {
            ${field.name}BadFormat = true;
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case}, false);
            return;
        } 
        set${field.name?cap_first}(new${field.name});
        ${field.name}BadFormat = false;
        fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
        fireNameAndOrTitleChangeOn${field.name?cap_first}();
    }
<#elseif field.type == "datetime" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.name}Text the ${field.name}
     */
    public void set${field.name?cap_first}(String ${field.name}Text) {
        Timestamp new${field.name};
        try {
            new${field.name}=new Timestamp(${field.name}Text);
        } catch (BadFormatException ex) {
            ${field.name}BadFormat = true;
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case}, false);
            return;
        } 
        set${field.name?cap_first}(new${field.name});
        ${field.name}BadFormat = false;
        fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
        fireNameAndOrTitleChangeOn${field.name?cap_first}();
    }
</#if>
</#if>
</#if>
</#if>
<#if !(field.hidden??) >
    private void fireNameAndOrTitleChangeOn${field.name?cap_first}() {
<#assign namechange = "no">
<#list ENTITYINFO.displaynameformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign namechange = "yes" >
</#if>
</#list>
</#list>
<#if namechange = "yes" >
        nameListenerFire();
</#if>
<#assign titlechange = "no">
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign titlechange = "yes" >
</#if>
</#list>
</#list>
<#else>
<#assign titlechange = namechange >
</#if>
<#if titlechange = "yes" >
        titleListenerFire();
</#if>
    }
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
    /**
     * Add a ${child.references} to this entity.
     *
     * @param e the ${child.name}
     */
    public void add${child.references}(${child.references} e) {
        e.linkToParent(this);
        ${child.name}s.add(e);
    }

    /**
     * Remove a ${child.references} from this entity.
     *
     * @param e the ${child.name}
     */
    public void remove${child.references}(${child.references} e) {
        e.unlinkFromParent();
        ${child.name}s.remove(e);
    }

    /**
     * Add set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void add${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.addSetListener(listener);
    }
    
    /**
     * remove set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void remove${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.removeSetListener(listener);
    }

    /**
     * Add set listener to all ${child.name}s (and parent) collections
     *
     * @param listener the set change listener to add
     */
    public static void add${child.references}sSetChangeListeners (Listener<SetChangeEventParams> listener) {
       ${ENTITYINFO.name}.getAll${ENTITYINFO.name}s().stream().forEach((${ENTITYINFO.name?lower_case}) -> {
            ${ENTITYINFO.name?lower_case}.${child.name}s.addSetListener(listener);
        });
        ${ENTITYINFO.parentname}.add${ENTITYINFO.name}sSetChangeListeners(listener);
    }
    
    /**
     * Remove set listener from all ${child.name}s (and parent) collections
     *
     * @param listener the set change listener to remove
     */
    public static void remove${child.references}sSetChangeListeners(Listener<SetChangeEventParams> listener) {
        ${ENTITYINFO.name}.getAll${ENTITYINFO.name}s().stream().forEach((${ENTITYINFO.name?lower_case}) -> {
            ${ENTITYINFO.name?lower_case}.${child.name}s.removeSetListener(listener);
        });
        ${ENTITYINFO.parentname}.remove${ENTITYINFO.name}sSetChangeListeners(listener);
    }

    /**
     * Get List of ${child.name}s associated with entity.
     *
     * @return list of ${child.name}s
     */
    public List<${child.references}> get${child.references}s() { 
        return ${child.name}s.get();
    }
<#if child.orderable = "yes">

    /**
     * Reorder the list of ${child.name}s associated with entity.
     *
     * @param perm the reordered index information
     * @param offsetMin the offset of the first element to be in the reordered section
     * @param offsetMax the offset of the last element to be in teh reordered section
     */
    public void reorder${child.references}s(int[] perm, int offsetMin, int offsetMax) {
        ${child.name}s.reorder(perm, offsetMin, offsetMax);
        ${child.name}s.persistReorder();
    }
</#if>
</#list>

    @Override
    protected final void entitySaveState() {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type == "ref" || field.type == "reference" >
            ${field.name}.saveState();
<#elseif field.type == "idx" || field.type == "rootref" >
<#else>
            ${field.name}Original = ${field.name};
</#if>
</#if>
</#list>
        }

    @Override
    protected final void entityRestoreState() {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type == "ref" || field.type == "reference">
        ${field.name}.restoreState();
<#elseif field.type == "idx"  || field.type == "rootref" >
<#else>
         ${field.name} = ${field.name}Original;
<#if field.type=="int" || field.type=="long" || field.type == "date" || field.type == "datetime" >
        ${field.name}BadFormat=false;
</#if>      
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
        ${child.name}s.restoreState();
</#list>
    }

    @Override
    protected final void entityRemove(){
<#list ENTITYINFO.referenced![] as referenced>
        ${referenced.name}.EM em${referenced.name} = ${referenced.name}.getEM();
        EntityPersistenceProvider<${ENTITYINFO.pkeytype}> epp = em${referenced.name}.getEntityPersistenceProvider();
        epp.find("${referenced.field}", getPK()).stream().forEach((pk) -> {
<#if referenced.optional??>
            ${referenced.name} ${referenced.name?lower_case} = em${referenced.name}.get(pk);
            ${referenced.name?lower_case}.set${referenced.field?cap_first}(null);
            ${referenced.name?lower_case}.save();
<#else>
            em${referenced.name}.get(pk).remove();
</#if>
        });
</#list>
<#list ENTITYINFO.child![] as child>
        get${child.references}s().stream().forEach((${child.name}) -> {
            ${child.name}.remove();
        });
</#list>
<#list ENTITYINFO.field as field>
<#if field.type = "ref"  || field.type = "rootref" >
        getParent().remove${ENTITYINFO.name}(this);
</#if>
</#list>
    }

    @Override
    protected final void entityLoad(EntityFields data) {
<#list ENTITYINFO.field![] as field>
<#if field.javatype == "DateOnly">
        try {
            ${field.name}.setDateUsingSQLString((String) data.get("${field.name}"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
<#elseif field.javatype == "Timestamp" >
        try {
            ${field.name}.setDateUsingSQLString((String) data.get("${field.name}"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
<#elseif field.type == "ref" || field.type == "reference">
        ${field.name}.set((Integer) data.get("${field.name}"));
<#elseif field.type == "rootref">
<#elseif field.type == "idx" >
<#elseif field.type == "password" >
        ${field.name} = (String) data.get("${field.name}");
        passwordrule.encodedPasswordLoaded();
<#elseif field.type == "boolean" >
        ${field.name} = (Boolean) data.get("${field.name}");
<#elseif field.type == "int">
        ${field.name} = (Integer) data.get("${field.name}");
<#else>
        ${field.name} = (String) data.get("${field.name}");
</#if>
</#list>
    }

    @Override
    protected final void entityCopy(${ENTITYINFO.name} from) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.javatype == "DateOnly">
        try {
            ${field.name} = new DateOnly(from.get${field.name?cap_first}().toString());
        } catch (BadFormatException ex) {
            throw new LogicException("Copy reported bad DateOnly format - should never happen!!");
        }
<#elseif field.javatype == "Timestamp" >
        try {
            ${field.name}= new Timestamp(from.get${field.name?cap_first}().toString());
        } catch (BadFormatException ex) {
            throw new LogicException("Copy reported bad Timestamp format - should never happen!!");
        }
<#elseif field.type == "ref" || field.type == "reference"|| field.type == "rootref" >
<#elseif field.type == "idx" >
<#else>
        ${field.name} = from.get${field.name?cap_first}();
</#if>
</#if>
</#list>
    }

    @Override
    protected final void entityDiffs(EntityFields data) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.javatype == "String" >
        if (!${field.name}.equals(${field.name}Original)) {
            data.put("${field.name}", ${field.name});
        }
<#elseif field.type == "datetime" | field.type == "date">
        if (!${field.name}.equals(${field.name}Original)) {
            data.put("${field.name}", ${field.name}.toSQLString());
        }
<#elseif field.type == "ref" || field.type == "reference" >
        if (${field.name}.isDirty()) {
<#if field.optional??>
            int idref${field.references} = ${field.name}.getPK();
            if (idref${field.references} < 0 ) {
                ${field.name}.get().save();
                data.put("${field.name}", ${field.name}.get().getPK());
            } else if (idref${field.references} == 0) {
                data.put("${field.name}", null);
            } else {
                data.put("${field.name}", idref${field.references});
            }
<#else>
            int idref${field.references} = ${field.name}.getPK();
            if (idref${field.references} < 0 ) {
                ${field.name}.get().save();
                idref${field.references} = ${field.name}.get().getPK();
            }
            data.put("${field.name}", idref${field.references});
</#if>
        }
<#elseif field.type == "rootref">
<#elseif field.type == "idx" >
<#else>
        if (${field.name} != ${field.name}Original) {
            data.put("${field.name}", ${field.name});
        }
</#if>
</#if>
</#list>
    }

    @Override
    protected final void entityValues(EntityFields data) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type == "ref" || field.type == "reference" >
<#if field.optional??>
        int idref${field.references} = ${field.name}.getPK();
        if (idref${field.references} < 0 ) {
            ${field.name}.get().save();
            data.put("${field.name}", ${field.name}.get().getPK());
        } else if (idref${field.references} == 0) {
            data.put("${field.name}", null);
        } else {
            data.put("${field.name}", idref${field.references});
        }
<#else>
        int idref${field.references} = ${field.name}.getPK();
        if (idref${field.references} < 0 ) {
            ${field.name}.get().save();
            idref${field.references} = ${field.name}.get().getPK();
        }
        data.put("${field.name}", idref${field.references});
</#if>
<#elseif field.type == "rootref">
<#elseif field.type == "idx" >
<#elseif field.type == "datetime" | field.type == "date">
        data.put("${field.name}", ${field.name}.toSQLString());
<#else>
        data.put("${field.name}", ${field.name});
</#if>
</#if>
</#list>
    }

    /**
     * Get the ${ENTITYINFO.name} Entity Manager
     * @return the ${ENTITYINFO.name} Entity Manager
     */
    public static ${ENTITYINFO.name}.EM getEM() {
        return Lookup.getDefault().lookup(${ENTITYINFO.name}.EM.class);
    }

    /**
     * The ${ENTITYINFO.name} Entity Manager
     */
    @ServiceProvider(service=${ENTITYINFO.name}.EM.class)
    public static class EM extends EntityManager<${ENTITYINFO.pkeytype},${ENTITYINFO.name},${ENTITYINFO.parentname}> {
   
<#if ENTITYINFO.pkey = "id" >
        private static int tpk = -1;
</#if>
        /**
         * Constructor.
         */
        public EM() {
            super("${ENTITYINFO.name}");
        }

        @Override
        protected final void link2parent(${ENTITYINFO.name} e, ${ENTITYINFO.parentname} parent) {
                parent.add${ENTITYINFO.name}(e);
        }
        
        @Override
        protected final ${ENTITYINFO.name} createNewEntity() {
            return new ${ENTITYINFO.name}(tpk--, this);
        }

        @Override
        protected final ${ENTITYINFO.name} createNewEntity(${ENTITYINFO.pkeytype} pk) {
            return new ${ENTITYINFO.name}(pk, this);
        }

        @Override
        protected final EntityPersistenceProvider createEntityPersistenceProvider() {
            return EntityPersistenceProviderManager.getEntityPersistenceProvider("${ENTITYINFO.dbkey}", "${ENTITYINFO.dbtablename}");
        }

<#if ENTITYINFO.pkey = "id" >
        @Override
        protected boolean isPersistent(Integer pkey) {
            return pkey > 0;
        }
</#if>
    }
<#list ENTITYINFO.child![] as child>
<#if child.sort = "yes" >

    private class ${child.references}Comparator implements Comparator<${child.references}> {
        @Override
        public int compare(${child.references} o1, ${child.references} o2) {
            return o1.getSortKey().compareTo(o2.getSortKey());
        }
    }
</#if>
</#list>
    /**
     * Get the set of all ${ENTITYINFO.name}s.
     * 
     * @return the set of all ${ENTITYINFO.name}s
     */
    public static List<${ENTITYINFO.name}> getAll${ENTITYINFO.name}s() {
        List<${ENTITYINFO.name}> list = new ArrayList<>();
<#if PARENTENTITYINFO.parentname?? >
        ${ENTITYINFO.parentname}.getAll${ENTITYINFO.parentname}s().stream().forEach((parent) -> {
            list.addAll(parent.get${ENTITYINFO.name}s());
        });
<#else>
        list.addAll(${ENTITYINFO.parentname}.get().get${ENTITYINFO.name}s());
</#if>
        return list;
    }

    @Override
    public String getDisplayName() {
<#list ENTITYINFO.displaynameformat as df >
        return MessageFormat.format("${df.format}", <#list df.display as dp>format${dp.field}()<#if dp_has_next>, </#if></#list>);
</#list>
    }

    @Override
    public String getDisplayTitle() {
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df>
        return MessageFormat.format("${df.format}", <#list df.display as dp>format${dp.field}()<#if dp_has_next>, </#if></#list>);
</#list>
<#else>
        return getDisplayName();
</#if>
    }

    @Override
    public String getSortKey() {
<#if ENTITYINFO.sortformat?? >
<#list ENTITYINFO.sortformat as df>
        return MessageFormat.format("${df.format}", <#list df.display as dp>format${dp.field}(<#if dp.length??>${dp.length}</#if>)<#if dp_has_next>, </#if></#list>);
</#list>
<#else>
        return getDisplayTitle();
</#if>
    }

<#list ENTITYINFO.field![] as field>
<#if field.type != "rootref" >
    /**
     * Get the formatted text version of ${field.name} field
     *
     * @return the formatted String 
     */
    public String format${field.name?cap_first}() {
<#if field.type="reference" >
                return get${field.name?cap_first}()!=null ? get${field.name?cap_first}().getDisplayTitle(): "undefined";
<#elseif field.type="ref" >
                return getParent()!=null ? getParent().getDisplayName(): "undefined" ;
<#elseif field.type="int" >
            return Integer.toString(get${field.name?cap_first}());
<#elseif field.type="idx"  >
            return Integer.toString(getIndex());
<#elseif field.type="long" >
            return Long.toString(e.get${field.name?cap_first}());
<#elseif field.type="boolean" >
            return get${field.name?cap_first}()? "Yes": "No";
<#elseif field.type="date" || field.type="datetime" >
            return get${field.name?cap_first}().toString();
<#elseif field.type="String" ||  field.type="enum" || field.type="password" >
            return get${field.name?cap_first}();
</#if>
    }
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if field.type="int" >
    /**
     * Get the formatted text version of ${field.name} field left padded with
     * zeros if less than minimum size.
     *
     * @param minDigits minimum size
     * @return the formatted String
     */
    public String format${field.name?cap_first}(int minDigits) {
        return StringX.padLeft(format${field.name?cap_first}(),minDigits,'0');
    }
<#elseif field.type="String" >
    /**
     * Get the formatted text version of ${field.name} field left padded with
     * zeros if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String format${field.name?cap_first}(int minChars) {
        return StringX.padLeftIfInt(format${field.name?cap_first}(),minChars,'0');
    }
</#if>
</#list>
<#assign fireName = "no">
<#assign fireTitle = "no">
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
<#list ENTITYINFO.displaynameformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign fireName  = "yes" >
</#if>
</#list>
</#list>
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign fireTitle = "yes" >
</#if>
</#list>
</#list>
<#else>
<#assign fireTitle = fireName >
</#if>
</#if>
</#list>
<#if fireName = "yes" || fireTitle = "yes" >

    private class ReferencedEntityTitleChangeListener extends Listener<SimpleEventParams> {

        public  ReferencedEntityTitleChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(SimpleEventParams p) {
<#if fireName = "yes" >
            nameListenerFire();
</#if>
<#if fireTitle = "yes" >
            titleListenerFire();
</#if>
        }
    }
</#if>
}