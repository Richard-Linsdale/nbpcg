/*
 * Copyright (C) 2014 Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
<#-- Freemarker Template for Entity class -->
<#assign templateauthor = "Richard Linsdale (richard.linsdale at blueyonder.co.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign hassortchildren = false >
<#list ENTITYINFO.child![] as child>
<#assign hassortchildren = hassortchildren | child.sort??>
</#list>
package ${package};

import java.sql.ResultSet;
import java.sql.SQLException;
<#if ENTITYINFO.parentname??>
import java.util.ArrayList;
</#if>
<#if hassortchildren>
import java.util.Comparator;
</#if>
<#if ENTITYINFO.child??>
import java.util.List;
</#if>
<#if ENTITYINFO.access = "rw" >
import java.util.Map;
</#if>
import linsdale.lindos.lifecycle.ApplicationProperties;
<#if hassortchildren>
import ${nodepackage}.*;
</#if>
import linsdale.nbpcg.datasupportlib.dataaccess.DataAccess${ENTITYINFO.access?upper_case};
import linsdale.nbpcg.datasupportlib.dataaccess.${ENTITYINFO.type?lower_case}.*;
import linsdale.nbpcg.datasupportlib.dbfields.${ENTITYINFO.withfields?lower_case}.*;
import linsdale.nbpcg.datasupportlib.entity.*;
import linsdale.nbpcg.datasupportlib.entityreferences.*;
import linsdale.nbpcg.supportlib.*;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;

/**
 * The ${ENTITYINFO.name} Entity (${ENTITYINFO.access}).
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file, apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
<#if ENTITYINFO.ordercolumn??>
public class ${ENTITYINFO.name} extends Entity${ENTITYINFO.access?upper_case}Indexed<${ENTITYINFO.name}> {
<#else>
<#if ENTITYINFO.access = "rw" >
public class ${ENTITYINFO.name} extends Entity${ENTITYINFO.access?upper_case}<${ENTITYINFO.name}> {
<#else>
public class ${ENTITYINFO.name} extends Entity${ENTITYINFO.access?upper_case} {
</#if>
</#if>

<#if ENTITYINFO.child??>
    private final ChildListener childListener;
</#if>
<#assign idx = 10 >
<#list ENTITYINFO.field![] as field>
<#if !(field.type == "rootref" || field.type == "idx") >
    /**
     * ${field.name?cap_first} field Id
     */
    public static final IntWithDescription ${field.name?upper_case}FIELD = new IntWithDescription(${idx}, "${field.name?cap_first}");
<#assign idx = idx + 1>
<#if field.entryfield??>
    /**
     * ${field.entryfield?cap_first} field Id
     */
    public static final IntWithDescription ${field.entryfield?upper_case}FIELD = new IntWithDescription(${idx}, "${field.entryfield?cap_first}");
<#assign idx = idx + 1>
</#if>
</#if>
<#if field.type == "ref" || field.type == "reference">
    private final EntityReference<${field.references}> ${field.name};
<#elseif field.type == "rootref" >
    private final ${field.references} ${field.name};
<#elseif field.type == "idx">
<#else>
    private ${field.javatype} ${field.rvid}${field.initialisation};
    private ${field.javatype} ${field.rvid}Original;
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
    /**
     * ${child.name?cap_first}s field Id
     */
    public static final IntWithDescription ${child.name?upper_case}SFIELD = new IntWithDescription(${idx}, "${child.name?cap_first}s");
<#assign idx = idx + 1>
<#if child.orderable??>
    private final EntityIndexedReferenceSet<${child.references}> ${child.name}s;
<#elseif child.sort??>
    private final EntitySortedReferenceSet<${child.references}> ${child.name}s;
<#else>
    private final EntityReferenceSet<${child.references}> ${child.name}s;
</#if>
</#list>
<#if ENTITYINFO.access="rw" >
<#if ENTITYINFO.ordercolumn??>
        private final DBFieldsRWIndexed${ENTITYINFO.withfields}<${ENTITYINFO.name}> dbfields;
<#else>
        private final DBFieldsRW${ENTITYINFO.withfields}<${ENTITYINFO.name}> dbfields;
</#if>
<#else>
        private final DBFieldsRO${ENTITYINFO.withfields} dbfields;
</#if>

    /**
     * Constructor - ${ENTITYINFO.name}.
     * @param id the unique id for this entity
     * @param em - the entity manager for this entity type
     */
    public ${ENTITYINFO.name}(int id, ${ENTITYINFO.name}.EM em) {
<#if ENTITYINFO.access="rw" >
<#if ENTITYINFO.ordercolumn??>
        this(id, em, new  DBFieldsRWIndexed${ENTITYINFO.withfields}<>());
    }

    private ${ENTITYINFO.name}(int id, ${ENTITYINFO.name}.EM em, DBFieldsRWIndexed${ENTITYINFO.withfields}<${ENTITYINFO.name}> dbfields) {
        super("${ENTITYINFO.name}", id, em, dbfields);
<#else>
        this(id, em, new DBFieldsRW${ENTITYINFO.withfields}<>());
    }

    private ${ENTITYINFO.name}(int id, ${ENTITYINFO.name}.EM em, DBFieldsRW${ENTITYINFO.withfields}<${ENTITYINFO.name}> dbfields) {
        super("${ENTITYINFO.name}", id, em, dbfields);
</#if>
<#else>
        this(id, em, new DBFieldsRO${ENTITYINFO.withfields}());
    }

    private ${ENTITYINFO.name}(int id, ${ENTITYINFO.name}.EM em, DBFieldsRO${ENTITYINFO.withfields} dbfields) {
        super("${ENTITYINFO.name}", id, em, dbfields);
</#if>
<#if ENTITYINFO.child??>
        childListener = new ChildListener("${ENTITYINFO.name}/childset");
</#if>
        this.dbfields = dbfields;
<#list ENTITYINFO.child![] as child>
<#if child.orderable??>
        ${child.name}s = new EntityIndexedReferenceSet<>("${ENTITYINFO.name}->>${child.name}s", ${child.name?upper_case}SFIELD, "${child.dbname}", getId(), ${child.references}.EM.class);
<#elseif child.sort??>
        ${child.name}s = new EntitySortedReferenceSet<>("${ENTITYINFO.name}->>${child.name}s", ${child.name?upper_case}SFIELD, new ${child.references}Comparator(), "${child.dbname}", getId(), ${child.references}.EM.class);
<#else>
        ${child.name}s = new EntityReferenceSet<>("${ENTITYINFO.name}->>${child.name}s", ${child.name?upper_case}SFIELD, "${child.dbname}", getId(), ${child.references}.EM.class);
</#if>
        ${child.name}s.addSetListener(childListener);
<#if child.min??>
        addRule(${child.name}s.getMinRule(${child.min}));
</#if>
<#if child.max??>
        addRule(${child.name}s.getMaxRule(${child.max}));
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
        ${field.name} = new EntityReference<>("${ENTITYINFO.name}<-${field.name?cap_first}", Lookup.getDefault().lookup(${field.references}.EM.class));
<#if !field.optional??>
        addRule(${field.name}.getDefinedRule());
</#if>
<#elseif field.type == "rootref">
        root = Lookup.getDefault().lookup(${field.references}.class);
</#if>
</#list>
<#if ENTITYINFO.access = "rw" >
<#list ENTITYINFO.field![] as field>
<#if field.type = "String" >
        addRule(new ${field.name?cap_first}MinRule());
        addRule(new ${field.name?cap_first}MaxRule());
<#if field.unique??>
        addRule(new ${field.name?cap_first}UniqueRule());
</#if>
<#elseif field.type = "int" || field.type = "long">
<#if field.min??>
        addRule(new ${field.name?cap_first}MinRule());
</#if>
<#if field.max??>
        addRule(new ${field.name?cap_first}MaxRule());
</#if>
<#elseif field.type = "date" || field.type = "datetime" >
<#if field.future??>
        addRule(new ${field.name?cap_first}FutureRule()); 
</#if>
<#if field.past??>
        addRule(new ${field.name?cap_first}PastRule());
</#if>
</#if>
</#list>
</#if>
        checkRulesAtLoad();
    }

<#if ENTITYINFO.access = "rw" >
<#list ENTITYINFO.field![] as field>
<#if field.type = "String" >
    private class ${field.name?cap_first}MinRule extends Rule {

        public ${field.name?cap_first}MinRule() {
            super("${field.name}  too short");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.length() >= ${field.min};
        }
    }

    private class ${field.name?cap_first}MaxRule extends Rule {

        public ${field.name?cap_first}MaxRule() {
            super("${field.name} too long");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.length() <= ${field.max};
        }
    }

<#if field.unique?? >
    private class ${field.name?cap_first}UniqueRule extends UniqueRule {

        public ${field.name?cap_first}UniqueRule() {
            super("${field.name} is not unique");
        }

        @Override
        protected boolean ruleCheck() {
<#list ENTITYINFO.field![] as pref>
<#if pref.type="ref" || pref.type="rootref" >
            return get${pref.name?cap_first}().get${ENTITYINFO.name}s().stream().noneMatch((e) -> (e != ${ENTITYINFO.name}.this && e.get${field.name?cap_first}().equals(${field.name})));

</#if>
</#list>
        }
    }

</#if>
<#elseif field.type = "int" || field.type = "long" >
<#if field.min??>
    private class ${field.name?cap_first}MinRule extends Rule {

        public ${field.name?cap_first}MinRule() {
            super("${field.name} is set below minimum");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name} >= ${field.min};
        }
    }

</#if>
<#if field.max??>
    private class ${field.name?cap_first}MaxRule extends Rule {

        public ${field.name?cap_first}MaxRule() {
            super("${field.name} is set above maximum");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name} <= ${field.max};
        }
    }

</#if>
<#elseif field.type = "date" || field.type = "datetime" >
<#if field.future??>
    private class ${field.name?cap_first}FutureRule extends Rule {

        public ${field.name?cap_first}FutureRule() {
            super("${field.name} must be in the future");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.compareTo() != -1;
        }
    }

</#if>
<#if field.past??>
    private class ${field.name?cap_first}PastRule extends Rule {

        public ${field.name?cap_first}PastRule() {
            super("${field.name} must be in the past");
        }

        @Override
        public boolean ruleCheck() {
            return ${field.name}.compareTo() != 1;
        }
    }

</#if>
</#if>
</#list>
</#if>
<#list ENTITYINFO.field![] as field>
<#if field.type = "ref" >

    /**
     * Get the ${field.name?cap_first} Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} get${field.name?cap_first}() {
        return ${field.name}.get();
    }

    /**
     * Set the ${field.name?cap_first} Entity associated with this entity.
     * called from the parent entity as part of the add / remove roles methods
     *
     * @param e the ${field.name} entity
     */
    protected void setInternal${field.name?cap_first}(${field.references} e) {
        ensureEditing();
        if (${field.name}.set(e) ) {
            fireFieldChange(${field.name?upper_case}FIELD);
        }
    }

    /**
     * Set the ${field.name?cap_first} Entity associated with this entity.
     *
     * @param e the ${field.name} entity
     */
    public void set${field.name?cap_first}(${field.references} e) {
        if (${field.name}.getId() != e.getId()) {
            ensureEditing();
            if (${field.name}.isValidEntity()) {
                ${field.name}.get().removeInternal${ENTITYINFO.name}(this);
            }
            boolean updated = ${field.name}.set(e);
            if (${field.name}.isValidEntity()) {
                ${field.name}.get().addInternal${ENTITYINFO.name}(this);
            }
            if (updated) {
                fireFieldChange(${field.name?upper_case}FIELD);
            }
        }   
    }
<#elseif field.type = "reference" >

    /**
     * Get the ${field.name?cap_first} Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} get${field.name?cap_first}() {
        return ${field.name}.get();
    }

    /**
     * Set the ${field.name?cap_first} Entity associated with this entity.
     *
     * @param e the ${field.name} entity
     */
    public void set${field.name?cap_first}(${field.references} e) {
        ensureEditing();
        if (${field.name}.set(e)) {
            fireFieldChange(${field.name?upper_case}FIELD);
        }   
    }
<#elseif field.type = "rootref" >

    /**
     * Get the ${field.name?cap_first} Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} get${field.name?cap_first}() {
        return root;
    }
<#elseif field.type == "idx" >
<#else>

    /**
     * Get the ${field.rvid}.
     *
     * @return the ${field.rvid}
     */
    public ${field.javatype} get${field.name?cap_first}() {
        return ${field.rvid};
    }
<#if field.type == "int" >

    /**
     * Get the ${field.rvid} in String format.
     *
     * @return the ${field.rvid}
     */
    public String get${field.name?cap_first}Text() {
        return Integer.toString(${field.rvid});
    }
<#elseif field.type == "long" >

    /**
     * Get the ${field.rvid} in String format.
     *
     * @return the ${field.rvid}
     */
    public String get${field.name?cap_first}Text() {
        return Long.toString(${field.rvid});
    }
<#elseif field.type == "date" >

    /**
     * Get the ${field.rvid} in String format.
     *
     * @return the ${field.rvid}
     */
    public String get${field.name?cap_first}Text() {
        return ${field.rvid}.toString();
    }
<#elseif field.type == "datetime" >

    /**
     * Get the ${field.rvid} in String format.
     *
     * @return the ${field.rvid}
     */
    public String get${field.name?cap_first}Text() {
        return ${field.rvid}.toString();
    }
</#if>
<#if ENTITYINFO.access = "rw" >
<#if field.entryfield??>

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.entryfield} the ${field.entryfield}
     */
    public void set${field.entryfield?cap_first}(String ${field.entryfield}) {
        String encoded = ${field.encodemethod}(${field.entryfield});
        if (!this.${field.rvid}.equals(encoded)) {
            ensureEditing();
            this.${field.rvid} = encoded;
            fireFieldChange(${field.name?upper_case}FIELD);
        }
    }
<#else>

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.rvid} the ${field.rvid}
     */
    public void set${field.name?cap_first}(${field.javatype} ${field.rvid}) {
<#if field.type == "String" | field.type == "enum" >
        if (!this.${field.rvid}.equals(${field.rvid})) {
<#elseif field.type == "date" || field.type == "datetime" >
        if (!this.${field.rvid}.toString().equals(${field.rvid}.toString())) {
<#else>
        if (this.${field.rvid} != ${field.rvid}) {
</#if>
            ensureEditing();
            this.${field.rvid} = ${field.rvid};
            fireFieldChange(${field.name?upper_case}FIELD);
        }
    }
</#if>
<#if field.type == "int" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.rvid}Text the ${field.rvid}
     */
    public void set${field.name?cap_first}(String ${field.rvid}Text) {
        int new${field.rvid};
        try {
            new${field.rvid}=Integer.parseInt(${field.rvid}Text);
        } catch (NumberFormatException ex) {
            fireFieldChange(${field.name?upper_case}FIELD, false);
            return;
        } 
        set${field.name?cap_first}(new${field.rvid});
    }
<#elseif field.type == "long" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.rvid}Text the ${field.rvid}
     */
    public void set${field.name?cap_first}(String ${field.rvid}Text) {
        long new${field.rvid};
        try {
            new${field.rvid}=Long.parseLong(${field.rvid}Text);
        } catch (NumberFormatException ex) {
            fireFieldChange(${field.name?upper_case}FIELD, false);
            return;
        } 
        set${field.name?cap_first}(new${field.rvid});
    }
<#elseif field.type == "date" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.rvid}Text the ${field.rvid}
     */
    public void set${field.name?cap_first}(String ${field.rvid}Text) {
        DateOnly new${field.rvid};
        try {
            new${field.rvid}=new DateOnly(${field.rvid}Text);
        } catch (BadFormatException ex) {
            fireFieldChange(${field.name?upper_case}FIELD, false);
            return;
        } 
        set${field.name?cap_first}(new${field.rvid});
    }
<#elseif field.type == "datetime" >

    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.rvid}Text the ${field.rvid}
     */
    public void set${field.name?cap_first}(String ${field.rvid}Text) {
        Timestamp new${field.rvid};
        try {
            new${field.rvid}=new Timestamp(${field.rvid}Text);
        } catch (BadFormatException ex) {
            fireFieldChange(${field.name?upper_case}FIELD, false);
            return;
        } 
        set${field.name?cap_first}(new${field.rvid});
    }
</#if>
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
    /**
     * Add a ${child.references} to this entity.
     *
     * @param e the ${child.name}
     */
    public void add${child.references}(${child.references} e) {
        e.setInternal${ENTITYINFO.name}(this);
        ${child.name}s.add(e);
    }

    /**
     * Add a ${child.references} to this entity.
     * internal use only - called from ${child.references?cap_first}
     *
     * @param e the ${child.name}
     */
    protected void addInternal${child.references}(${child.references} e) {
        ${child.name}s.add(e);
    }

    /**
     * Remove a ${child.references} from this entity.
     *
     * @param e the ${child.name}
     */
    public void remove${child.references}(${child.references} e) {
        e.setInternal${ENTITYINFO.name}((${ENTITYINFO.name}) null);
        ${child.name}s.remove(e);
    }

    /**
     * Remove a ${child.references} from this entity.
     * internal use only - called from ${child.references?cap_first}
     *
     * @param e the ${child.name}
     */
    protected void removeInternal${child.references}(${child.references} e) {
        ${child.name}s.remove(e);
    }

    /**
     * Get List of ${child.name}s associated with entity.
     *
     * @return list of ${child.name}s
     */
    public List<${child.references}> get${child.references}s() { 
        return ${child.name}s.get();
    }
<#if child.orderable??>

    /**
     * Reorder the list of ${child.name}s associated with entity.
     *
     * @param perm the reordered index information
     * @param offsetMin the offset of the first element to be in the reordered section
     * @param offsetMax the offset of the last element to be in teh reordered section
     */
    public void reorder${child.references}s(int[] perm, int offsetMin, int offsetMax) {
        ${child.name}s.reorder(perm, offsetMin, offsetMax);
        ${child.name}s.persistReorder();
    }
</#if>
</#list>

    @Override
    protected final void _saveState() {
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
            ${field.name}.saveState();
<#elseif field.type == "idx" || field.type == "rootref" >
<#else>
            ${field.name}Original = ${field.name};
</#if>
</#list>
        }

    @Override
    protected final void _restoreState() {
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference">
        ${field.name}.restoreState();
<#elseif field.type == "idx"  || field.type == "rootref" >
<#else>
        ${field.name} = ${field.name}Original;
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
        ${child.name}s.restoreState();
</#list>
    }
<#if ENTITYINFO.access = "rw" >

    @Override
    protected final void _remove() {
<#list ENTITYINFO.field as field>
<#if field.type = "ref"  || field.type = "rootref" >
        get${field.name?cap_first}().removeInternal${ENTITYINFO.name}(this);
</#if>
</#list>
    }
</#if>

    @Override
    protected final void _load(ResultSet rs) throws SQLException {
<#list ENTITYINFO.field![] as field>
<#if field.javatype == "DateOnly">
        ${field.rvid}.setDateUsingSQLString(rs.${field.javarsget}("${field.name}"));
<#elseif field.javatype == "Timestamp" >
        ${field.rvid}.setDateUsingSQLString(rs.${field.javarsget}("${field.name}"));
<#elseif field.type == "ref" || field.type == "reference">
        ${field.name}.set(rs.getInt("${field.name}"));
<#elseif field.type == "rootref">
<#elseif field.type == "idx" >
<#else>
        ${field.rvid} = rs.${field.javarsget}("${field.name}");
</#if>
</#list>
    }
<#if ENTITYINFO.access = "rw" >

    @Override
    protected final void _copy(${ENTITYINFO.name} from){
<#list ENTITYINFO.field![] as field>
<#if field.javatype == "DateOnly">
        try {
            ${field.rvid} = new DateOnly(from.get${field.name?cap_first}().toString());
        } catch (BadFormatException ex) {
            throw new LogicException("Copy reported bad DateOnly format - should never happen!!");
        }
<#elseif field.javatype == "Timestamp" >
        try {
            ${field.rvid}= new Timestamp(from.get${field.name?cap_first}().toString());
        } catch (BadFormatException ex) {
            throw new LogicException("Copy reported bad Timestamp format - should never happen!!");
        }
<#elseif field.type == "ref" || field.type == "reference"|| field.type == "rootref" >
<#elseif field.type == "idx" >
<#else>
        ${field.rvid} = from.get${field.name?cap_first}();
</#if>
</#list>
    }

    @Override
    protected final void _diffs(Map<String, Object> map) {
<#list ENTITYINFO.field![] as field>
<#if field.javatype == "String">
        if (!${field.rvid}.equals(${field.rvid}Original)) {
            map.put("${field.name}", ${field.rvid});
        }
<#elseif field.type == "ref" || field.type == "reference" >
        if (${field.name}.isDirty()) {
<#if field.optional??>
            map.put("${field.name}", ${field.name}.getId() == 0 ? null: ${field.name}.getId());
<#else>
            map.put("${field.name}", ${field.name}.getId());
</#if>
        }
<#elseif field.type == "rootref">
<#elseif field.type == "idx" >
<#else>
        if (${field.rvid} != ${field.rvid}Original) {
            map.put("${field.name}", ${field.rvid});
        }
</#if>
</#list>
    }

    @Override
    protected final void _values(Map<String, Object> map) {
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
<#if field.optional??>
        map.put("${field.name}", ${field.name}.getId() == 0 ? null: ${field.name}.getId());
<#else>
        map.put("${field.name}", ${field.name}.getId());
</#if>
<#elseif field.type == "rootref">
<#elseif field.type == "idx" >
<#else>
        map.put("${field.name}", ${field.rvid});
</#if>
</#list>
    }
</#if>

    /**
     * Get the ${ENTITYINFO.name} Entity Manager
     * @return the ${ENTITYINFO.name} Entity Manager
     */
    public static ${ENTITYINFO.name}.EM getEM() {
        return Lookup.getDefault().lookup(${ENTITYINFO.name}.EM.class);
    }

    /**
     * The ${ENTITYINFO.name} Entity Manager
     */
    @ServiceProvider(service=${ENTITYINFO.name}.EM.class)
    public static class EM extends EntityManager${ENTITYINFO.access?upper_case}<${ENTITYINFO.name}> {
        
        /**
         * Constructor.
         */
        public EM() {
            super("${ENTITYINFO.name}");
        }
<#if ENTITYINFO.access = "rw" >

        @Override
        protected final void _link2parent(${ENTITYINFO.name} e, Entity parent) {
<#list ENTITYINFO.field![] as field>
<#if field.type="ref" || field.type = "rootref" >
            if (parent instanceof ${field.references}) {
                ((${field.references})parent).add${ENTITYINFO.name}(e);
                return;
            }
</#if>
</#list>
            throw new LogicException("Unknown parent class for ${ENTITYINFO.name}.Helper.link2parent(..)");
        }
</#if>
        
        @Override
        protected final ${ENTITYINFO.name} _createNewEntity(int id) {
            return new ${ENTITYINFO.name}(id, this);
        }

        @Override
        protected final DataAccess${ENTITYINFO.access?upper_case} _createDataAccess() {
<#if ENTITYINFO.access="rw" >
<#if ENTITYINFO.ordercolumn??>
            return new DataAccessRW${ENTITYINFO.type}("${ENTITYINFO.dbtablename}", "${ENTITYINFO.ordercolumn}", ApplicationProperties.get().getDataService("${ENTITYINFO.dbkey}"));
<#else>
            return new DataAccessRW${ENTITYINFO.type}("${ENTITYINFO.dbtablename}", ApplicationProperties.get().getDataService("${ENTITYINFO.dbkey}"));
</#if>
<#else>
            return new DataAccessRO${ENTITYINFO.type}("${ENTITYINFO.dbtablename}", ApplicationProperties.get().getDataService("${ENTITYINFO.dbkey}"));
</#if>
        }
    }
<#list ENTITYINFO.child![] as child>
<#if child.sort??>

    private class ${child.references}Comparator implements Comparator<${child.references}> {
        @Override
        public int compare(${child.references} o1, ${child.references} o2) {
            return ${ENTITYINFO.name}NodeChildFactory.${child.references}NodeDisplay.getSort(o1,"undefined").compareTo(${ENTITYINFO.name}NodeChildFactory.${child.references}NodeDisplay.getSort(o2,"undefined"));
        }
    }
</#if>
</#list>
<#if ENTITYINFO.child??>

    private class ChildListener extends Listener<SetChangeListenerParams> {

        public ChildListener(String name) {
            super(name);
        }

        @Override
        public void action(SetChangeListenerParams p) {
            fireSetChange(p);
        }
    }
</#if>
<#if ENTITYINFO.parentname??>

    /**
     * Get the set of all ${ENTITYINFO.name}s.
     * 
     * @return the set of all ${ENTITYINFO.name}s
     */
public static List<${ENTITYINFO.name}> getAll${ENTITYINFO.name}s() {
        List<${ENTITYINFO.name}> list = new ArrayList<>();
        ${ENTITYINFO.parentname}.getAll${ENTITYINFO.parentname}s().stream().forEach((parent) -> {
            list.addAll(parent.get${ENTITYINFO.name}s());
        });
        return list;
    }
</#if>
}