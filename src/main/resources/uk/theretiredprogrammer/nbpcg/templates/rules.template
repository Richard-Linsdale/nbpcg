<#--
     Copyright 2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Rules class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import uk.theretiredprogrammer.nbpcglibrary.rules.*;

/**
 * Rules - ${ENTITYINFO.name}.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name}Rules {

    private final static Rules<${ENTITYINFO.name}Entity> ENTITY_RULES = new Rules<>();
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref">
    private final static Rules<${ENTITYINFO.name}Entity> ${field.name?upper_case}_RULES = new Rules<>();
<#elseif field.type == "reference">
    private final static Rules<${ENTITYINFO.name}Entity> ${field.name?upper_case}_RULES = new Rules<>();
<#elseif field.type == "rootref" >
<#else>
<#if !field.hidden??>
    private final static Rules<${ENTITYINFO.name}Entity> ${field.name?upper_case}_RULES = new Rules<>();
</#if>
</#if>
</#list>

    static {
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference">
<#if !field.optional??>
        ${field.name?upper_case}_RULES.addRule(new DefinedRule<${ENTITYINFO.name}Entity>(e->e.get${field.name?cap_first}()));
</#if>
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if !field.hidden??>
<#if field.type = "String" >
<#if field.min??>
        ${field.name?upper_case}_RULES.addRule(new MinStringRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}(), ${field.min}));
</#if>
<#if field.max??>
        ${field.name?upper_case}_RULES.addRule(new MaxStringRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}(), ${field.max}));
</#if>
<#if field.unique??>
       // ${field.name?upper_case}_RULES.addRule(new UniqueStringRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}(),
       //     () -> getParent().get${ENTITYINFO.name}s().stream().filter((e) -> e != ${ENTITYINFO.name}.this).map((e)-> e.get${field.name?cap_first}())));
</#if>
<#elseif field.type = "int" || field.type = "long" || field.type = "currency" || field.type = "decimal" >
<#if field.min??>
        ${field.name?upper_case}_RULES.addRule(new MinIntegerRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}(), ${field.min}));
</#if>
<#if field.max??>
        ${field.name?upper_case}_RULES.addRule(new MaxIntegerRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}(), ${field.max}));
</#if>
<#elseif field.type = "date" || field.type = "datetime" >
<#if field.future??>
        ${field.name?upper_case}_RULES.addRule(new FutureRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}()));
</#if>
<#if field.past??>
        ${field.name?upper_case}_RULES.addRule(new PastRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}()));
</#if>
<#elseif field.type = "enum" >
        ${field.name?upper_case}_RULES.addRule(new EnumRule<${ENTITYINFO.name}Entity>(e-> e.get${field.name?cap_first}()));
</#if>
</#if>
</#list>
<#if ENTITYINFO.rule??>
        ${field.name?upper_case}_RULES.addRule(new ${ENTITYINFO.rule}(this));
</#if>
    }

    public static boolean areAllRulesValid(StringBuilder sb, ${ENTITYINFO.name}Entity be) {
        boolean res = true;
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference">
        res  = ${field.name?upper_case}_RULES.checkRules(sb,  be) && res;
<#elseif field.type == "rootref" >
<#else>
<#if !field.hidden??>
        res  = ${field.name?upper_case}_RULES.checkRules(sb,  be) && res;
</#if>
</#if>
</#list>    
        return ENTITY_RULES.checkRules(sb,  be) && res;
    }
    
    public static boolean areAllRulesExceptUniqueValid(StringBuilder sb, ${ENTITYINFO.name}Entity be) {
        boolean res = true;
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference">
        res  = ${field.name?upper_case}_RULES.checkRulesAtLoad(sb,  be) && res;
<#elseif field.type == "rootref" >
<#else>
<#if !field.hidden??>
        res  = ${field.name?upper_case}_RULES.checkRulesAtLoad(sb,  be) && res;
</#if>
</#if>
</#list>    
        return ENTITY_RULES.checkRulesAtLoad(sb,  be) && res;
    }
    
    public static boolean areEntityRulesValid(StringBuilder sb, ${ENTITYINFO.name}Entity be) {
        return ENTITY_RULES.checkRules(sb,  be);
    } 

<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference">
    public static boolean are${field.name?cap_first}RulesValid(StringBuilder sb, ${ENTITYINFO.name}Entity be) {
        return ${field.name?upper_case}_RULES.checkRules(sb,  be);
    }

<#elseif field.type == "rootref" >
<#else>
<#if !field.hidden??>
    public static boolean are${field.name?cap_first}RulesValid(StringBuilder sb, ${ENTITYINFO.name}Entity be) {
        return ${field.name?upper_case}_RULES.checkRules(sb,  be);
    }
</#if>
</#if>
</#list>    
}