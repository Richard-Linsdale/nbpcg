<#--
    Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Root entity class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign hassortchildren = false>
<#list ENTITYINFO.child as child>
<#assign hassortchildren = hassortchildren | child.sort = "yes" >
<#assign haschildren = true >
</#list>
package ${package};

import java.io.IOException;
<#if hassortchildren >
import java.util.Comparator;
</#if>
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
<#if haschildren >
import uk.theretiredprogrammer.nbpcglibrary.common.Listener;
</#if>
<#list ENTITYINFO.child as child>
<#if child.sort = "yes" >
import ${package}.${child.references}.${child.references}Field;
</#if>
</#list>
import uk.theretiredprogrammer.nbpcglibrary.common.LogBuilder;
import uk.theretiredprogrammer.nbpcglibrary.data.entity.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;

/**
 * The ${ENTITYINFO.name} Object
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}. 
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@ServiceProvider(service = ${ENTITYINFO.name}.class)
public class ${ENTITYINFO.name} extends CoreEntity {

    /**
     * the ${ENTITYINFO.name} field identifiers
     */
    public enum ${ENTITYINFO.name}Field {
<#list ENTITYINFO.child as child>
        /**
         * the ${child.name}s collection
         */
        ${child.name?upper_case}S,
</#list>
    }

<#list ENTITYINFO.child![] as child>
<#assign CHILDENTITY = entityinfo[child.name?cap_first]>
<#if child.orderable = "yes" >
    private final EntityIndexedReferenceSet<${child.references}, ${ENTITYINFO.name}> ${child.name}s;
<#elseif child.sort = "yes" >
    private final EntitySortedReferenceSet<${child.references}, ${ENTITYINFO.name}, ${child.references}Field> ${child.name}s;
<#else>
    private final EntityReferenceSet<${child.references}, ${ENTITYINFO.name}> ${child.name}s;
</#if>
</#list>

    @Override
    public final String instanceDescription() {
        return LogBuilder.instanceDescription(this);
    }
    
    /**
     * Get the ${ENTITYINFO.name} entity.
     * 
     * @return the ${ENTITYINFO.name} entity
     */
    public static ${ENTITYINFO.name} get() {
        return Lookup.getDefault().lookup(${ENTITYINFO.name}.class);
    }
    
    /**
     * Constructor.
     * @throws IOException if problem with obtaining/parsing data
     */
    public ${ENTITYINFO.name}() throws IOException {
        super("${ENTITYINFO.name}", "${ENTITYINFO.icon}");
<#list ENTITYINFO.child![] as child>
<#if child.orderable = "yes" >
        ${child.name}s = new EntityIndexedReferenceSet<>(instanceDescription()+">${child.name?cap_first}s", ${child.references}.EM.class);
<#elseif child.sort = "yes" >
        ${child.name}s = new EntitySortedReferenceSet<>(instanceDescription()+">${child.name?cap_first}s", new ${child.references}Comparator(), ${child.references}.EM.class);
<#else>
        ${child.name}s = new EntityReferenceSet<>(instanceDescription()+">${child.name?cap_first}s", ${child.references}.EM.class);
</#if>
        ${child.name}s.load();
</#list>
    }
<#list ENTITYINFO.child![] as child>

    /**
     * Add a ${child.references} to the root's list
     *
     * @param e the ${child.name}
     */
    public void add${child.references}(${child.references} e) {
        ${child.name}s.add(e);
    }

    /**
     * Remove a ${child.references} from the root's list
     *
     * @param e the ${child.references}
     */
    public void remove${child.references}(${child.references} e) {
        ${child.name}s.remove(e);
    }

    /**
     * Add set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void add${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.addSetListener(listener);
    }
    
    /**
     * remove set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void remove${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.removeSetListener(listener);
    }

    /**
     * Add set listener to requested collection field (set)
     *
     * @param listener the set change listener to be added
     */
    public static void add${child.references}sSetChangeListeners(Listener<SetChangeEventParams> listener) {
        get().${child.name}s.addSetListener(listener);
    }

    /**
     * Remove set listener from requested collection field (set)
     *
     * @param listener the set change listener to be removed
     */
    public static void remove${child.references}sSetChangeListeners(Listener<SetChangeEventParams> listener) {
        get().${child.name}s.removeSetListener(listener);
    }

    /**
     * Get the list of ${child.references}s
     *
     * @return the list of ${child.references}s
     */
    public List<${child.references}> get${child.references}s() { 
        return ${child.name}s.get();
    }
<#if child.orderable = "yes" >

   /**
     * Reorder the list of ${child.references}s
     *
     * @param perm the reordered index information
     * @param offsetMin the min offset of the reorder
     * @param offsetMax the max offset of the reorder
     */
    public void reorder${child.name?cap_first}s(int[] perm, int offsetMin, int offsetMax) {
        ${child.name}s.reorder(perm, offsetMin, offsetMax);
<#if entityinfo[child.references].ordercolumn?? >
        ${child.name}s.persistReorder();
</#if>
    }
</#if>
</#list>

        @Override
        protected final void entityRestoreState() {
<#list ENTITYINFO.child![] as child>
            ${child.name}s.restoreState();
</#list>
        }
<#list ENTITYINFO.child![] as child>
<#if child.sort = "yes" >

    private class ${child.references}Comparator implements Comparator<${child.references}> {
        @Override
        public int compare(${child.references} o1, ${child.references} o2) {
            return o1.getSortKey().compareTo(o2.getSortKey());
        }
    }
</#if>
</#list>

    @Override
    public String getDisplayName() {
        return "${ENTITYINFO.label}";
    }
}