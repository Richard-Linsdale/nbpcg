<#--
     Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Root Node class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >

<#assign hassortchildren = false >
<#assign haschildren = false >
<#list ENTITYINFO.child![] as c>
<#assign haschildren = true >
<#assign child = c.name?cap_first >
</#list>

package ${package};

import com.famfamfam.www.silkicons.Icons;
import java.awt.Image;
import java.awt.datatransfer.Transferable;
import java.io.IOException;
import java.util.List;
import java.util.function.Supplier;
import javax.swing.Action;
import org.openide.actions.PasteAction;
import org.openide.nodes.*;
import org.openide.util.datatransfer.PasteType;
import uk.theretiredprogrammer.accesscontrolmanager.dataobjects.${child}Entity;
<#list ENTITYINFO.child![] as child>
import static ${package}.${child.name?cap_first}Node.${child.name?upper_case}NODE_FLAVOR;
</#list>

/**
 * Node for ${ENTITYINFO.name}
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name}Node extends AbstractNode {

    private final ${ENTITYINFO.name}NodeChildFactory factory;

   /**
     * Constructor
     */
    public ${ENTITYINFO.name}Node() {
        this(() -> new ${child}s());
    }

    private ${ENTITYINFO.name}Node(Supplier<${child}s> creator){
        this(new ${ENTITYINFO.name}NodeChildFactory(creator));
    }

    private ${ENTITYINFO.name}Node(${ENTITYINFO.name}NodeChildFactory factory) {
        super(Children.create(factory, true));
        this.factory = factory;
    }
 
    public void add${child}(${child}Entity e) {
        factory.add(e);
    }

    public void remove${child}(${child}Entity e) {
        factory.remove(e);
    }

    @Override
    public final void destroy() throws IOException {
        factory.clearChildren();
    }

    @Override
    public String getHtmlDisplayName() {
        return "<i>" + getDisplayName();
    }

    @Override
    public String getDisplayName() {
        return "${child}s";
    }

    @Override
    public Image getIcon(int type) {
        return Icons.get("${ENTITYINFO.icon}");
    }

    @Override
    public Image getOpenedIcon(int type) {
        return getIcon(type);
    }

    @Override
    public Action[] getActions(boolean context) {
        return new Action[]{
            PasteAction.get(PasteAction.class),};
    }

    @Override
    public Action getPreferredAction() {
        return PasteAction.get(PasteAction.class);
    }

// DND target support
    @Override
    public PasteType getDropType(final Transferable t, int arg1, int arg2) {
        if (t.isDataFlavorSupported(${child?upper_case}NODE_FLAVOR)) {
            return new AllowedPasteType(t);
        } else {
            return null;
        }
    }

    // CUT / COPY target support
    @Override
    public void createPasteTypes(Transferable t, List<PasteType> s) {
        super.createPasteTypes(t, s);
        PasteType p = getDropType(t, 0, 0);
        if (p != null) {
            s.add(p);
        }
    }
    
    private class AllowedPasteType extends PasteType {
        
        private final Transferable t;
        
        public AllowedPasteType(Transferable t) {
            this.t = t;
        }
        
        @Override
        public Transferable paste() throws IOException {
            UserNode node = (${child}Node) NodeTransfer.node(t, NodeTransfer.MOVE);
            if (node != null) {
                ((${ENTITYINFO.name}Node) node.getParentNode()).remove${child}(node.getEntity());
                factory.add(node.getEntity());
                return null;
            }
            node = (${child}Node) NodeTransfer.node(t, NodeTransfer.COPY);
            if (node != null) {
                factory.add(new ${child}Entity(true, node.getEntity()));
            }
            return null;
        }
    }
}
