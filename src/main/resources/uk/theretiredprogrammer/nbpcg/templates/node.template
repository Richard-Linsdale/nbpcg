<#--
    Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for ChildFactory class plus an inner classes for Nodes. -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import com.famfamfam.www.silkicons.Icons;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.function.Function;
import javax.swing.Action;
import org.openide.ErrorManager;
import org.openide.actions.CopyAction;
import org.openide.actions.CutAction;
import org.openide.actions.DeleteAction;
import org.openide.actions.PasteAction;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.NodeTransfer;
import ${datapackage}.*;
import org.openide.nodes.PropertySupport;
import org.openide.nodes.Sheet;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.WeakListeners;
import org.openide.util.datatransfer.ExTransferable;
import org.openide.util.datatransfer.PasteType;
import org.openide.util.lookup.Lookups;
<#list ENTITYINFO.child![] as c>
import static ${package}.${c.name?cap_first}Node.${c.name?upper_case}NODE_FLAVOR;
</#list>
import uk.theretiredprogrammer.accesscontrolmanager.topcomponents.Edit${ENTITYINFO.name};
import uk.theretiredprogrammer.nbpcglibrary.common.Event;
import uk.theretiredprogrammer.nbpcglibrary.common.Listener;
import uk.theretiredprogrammer.nbpcglibrary.icons.SpecialIcons;


/**
 * Node for ${ENTITYINFO.name}Node.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name}Node extends AbstractNode implements PropertyChangeListener {

    /**
     * Data Flavor for Nodes of type ${ENTITYINFO.name}Node
     */
    public static final DataFlavor ${ENTITYINFO.name?upper_case}NODE_FLAVOR = new DataFlavor(${ENTITYINFO.name}Node.class, "${ENTITYINFO.name}Node");
    private final Event titlechange = new Event();
        
<#assign haschildren = false>
<#list ENTITYINFO.child![] as c>
<#assign haschildren = true >
<#assign child = c.name?cap_first />
</#list>
<#if ENTITYINFO.customchildfactorypackage?? >
<#assign haschildren = true >
</#if>
<#if haschildren >
        private final ${ENTITYINFO.name}NodeChildFactory factory;

        /**
         * Constructor
         *
         * @param e the entity associated with this node
         */
        public ${ENTITYINFO.name}Node(${ENTITYINFO.name} e) {
            this(e, (id) -> new ${child}s(id));
        }

        private ${ENTITYINFO.name}Node(${ENTITYINFO.name} e, Function<Integer, ${child}s> creator) {
            this(e, new ${ENTITYINFO.name}NodeChildFactory(e.getId(), creator));
        }

        @SuppressWarnings("LeakingThisInConstructor")
        private ${ENTITYINFO.name}Node(${ENTITYINFO.name} e, ${ENTITYINFO.name}NodeChildFactory factory) {
            super(Children.create(factory, true), Lookups.singleton(e));
            this.factory = factory;
            getEntity().addStateListener(new EntityStateChangeListener());
            e.addPropertyChangeListener(WeakListeners.propertyChange(this, e));
        }
<#else>
   
        /**
         * Constructor
         *
         * @param e the entity associated with this node
         */
        public ${ENTITYINFO.name}Node(${ENTITYINFO.name} e) {
            super(Children.LEAF, Lookups.singleton(e));
            getEntity().addStateListener(new EntityStateChangeListener());
            e.addPropertyChangeListener(WeakListeners.propertyChange(this, e));
        }
</#if>

    private ${ENTITYINFO.name} getEntity() {
        return getLookup().lookup(${ENTITYINFO.name}.class);
    }

<#if haschildren>
    /**
     * add a ${child} entity to the children model
     *
     * @param e the entity to add
     */
    public void add${child}(${child} e){
        factory.add(e);
    }

</#if>
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("username".equals(evt.getPropertyName())) {
            fireDisplayNameChange(null, getDisplayName());
            titlechange.fire(evt);
        }
    }
    
    /**
     * Add a listener to track changes to the title string
     *
     * @param listener the listener
     */
    public void addTitleListener(Listener listener){
        titlechange.addListener(listener);
    }
    
    /**
     * Remove a listener used to track changes to the title string
     *
     * @param listener the listener
     */
    public void removeTitleListener(Listener listener){
        titlechange.removeListener(listener);
    }

    @Override
    public String getHtmlDisplayName() {
        ${ENTITYINFO.name} entity = getEntity();
        return (entity.isNew() ? "<font color='#0000FF'><b>" : (entity.isEditing() ? "<b>" : "")) + getDisplayName();
    }

    @Override
    public String getDisplayName() {
<#list ENTITYINFO.displaynameformat as df >
        return MessageFormat.format("${df.format}", 
<#list df.display as dp>
<#list ENTITYINFO.field![] as fd>
<#if fd.name == dp.field?lower_case >
<#if fd.type="reference" >
                getEntity().get${fd.name?cap_first}().getDisplayTitle()<#if dp_has_next>, </#if>
<#elseif fd.type="ref" >
                getParentNode().getDisplayName();<#if dp_has_next>, </#if>
<#elseif fd.type="int" >
                Integer.toString(getEntity().get${fd.name?cap_first}())<#if dp_has_next>, </#if>
<#elseif fd.type="idx"  >
                Integer.toString(getEntity().getIdx())<#if dp_has_next>, </#if>
<#elseif fd.type="long" >
                Long.toString(getEntity().get${fd.name?cap_first}())<#if dp_has_next>, </#if>
<#elseif fd.type="boolean" >
                getEntity().get${fd.name?cap_first}()? "Yes": "No"<#if dp_has_next>, </#if>
<#elseif fd.type="date" || fd.type="datetime" >
                getEntity().get${fd.name?cap_first}().toString()<#if dp_has_next>, </#if>
<#elseif fd.type="currency" || fd.type="decimal" >
                getEntity().get${fd.name?cap_first}().toPlainString()<#if dp_has_next>, </#if>
<#elseif fd.type="String" ||  fd.type="enum" || fd.type="password" >
                getEntity().get${fd.name?cap_first}()<#if dp_has_next>, </#if>
</#if>
</#if>
</#list>
</#list>
                    );
</#list>
    }

    public String getDisplayTitle() {
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df >
        return MessageFormat.format("${df.format}", 
<#list df.display as dp>
<#list ENTITYINFO.field![] as fd>
<#if fd.name == dp.field?lower_case >
<#if fd.type="reference" >
                getEntity().get${fd.name?cap_first}().getDisplayTitle()<#if dp_has_next>, </#if>
<#elseif fd.type="ref" >
                getParentNode().getDisplayName();<#if dp_has_next>, </#if>
<#elseif fd.type="int" >
                Integer.toString(getEntity().get${fd.name?cap_first}())<#if dp_has_next>, </#if>
<#elseif fd.type="idx"  >
                Integer.toString(getEntity().getIdx())<#if dp_has_next>, </#if>
<#elseif fd.type="long" >
                Long.toString(getEntity().get${fd.name?cap_first}())<#if dp_has_next>, </#if>
<#elseif fd.type="boolean" >
                getEntity().get${fd.name?cap_first}()? "Yes": "No"<#if dp_has_next>, </#if>
<#elseif fd.type="date" || fd.type="datetime" >
                getEntity().get${fd.name?cap_first}().toString()<#if dp_has_next>, </#if>
<#elseif fd.type="currency" || fd.type="decimal" >
                getEntity().get${fd.name?cap_first}().toPlainString()<#if dp_has_next>, </#if>
<#elseif fd.type="String" ||  fd.type="enum" || fd.type="password" >
                getEntity().get${fd.name?cap_first}()<#if dp_has_next>, </#if>
</#if>
</#if>
</#list>
</#list>
                    );
</#list>
<#else>
        return getDisplayName();
</#if>
    }

    public String getSortKey() {
<#if ENTITYINFO.sortformat?? >
<#list ENTITYINFO.displaysortformat as df >
        return MessageFormat.format("${df.format}", 
<#list df.display as dp>
<#list ENTITYINFO.field![] as fd>
<#if fd.name == dp.field?lower_case >
<#if fd.type="reference" >
                getEntity().get${fd.name?cap_first}().getDisplayTitle()<#if dp_has_next>, </#if>
<#elseif fd.type="ref" >
                getParentNode().getDisplayName();<#if dp_has_next>, </#if>
<#elseif fd.type="int" >
                Integer.toString(getEntity().get${fd.name?cap_first}())<#if dp_has_next>, </#if>
<#elseif fd.type="idx"  >
                Integer.toString(getEntity().getIdx())<#if dp_has_next>, </#if>
<#elseif fd.type="long" >
                Long.toString(getEntity().get${fd.name?cap_first}())<#if dp_has_next>, </#if>
<#elseif fd.type="boolean" >
                getEntity().get${fd.name?cap_first}()? "Yes": "No"<#if dp_has_next>, </#if>
<#elseif fd.type="date" || fd.type="datetime" >
                getEntity().get${fd.name?cap_first}().toString()<#if dp_has_next>, </#if>
<#elseif fd.type="currency" || fd.type="decimal" >
                getEntity().get${fd.name?cap_first}().toPlainString()<#if dp_has_next>, </#if>
<#elseif fd.type="String" ||  fd.type="enum" || fd.type="password" >
                getEntity().get${fd.name?cap_first}()<#if dp_has_next>, </#if>
</#if>
</#if>
</#list>
</#list>
                    );
</#list>
<#else>
        return getDisplayTitle();
</#if>
    }

    @Override
    public Image getIcon(int type) {
        return getEntity().checkRules(new StringBuilder()) ? super.getIcon(type) : getIconWithError();
    }

    @Override
    public Image getOpenedIcon(int type) {
        return getIcon(type);
    }

    /**
     * Get the node icon combined with an error marker.
     *
     * @return the image
     */
    private Image getIconWithError() {
        return addErrorToIcon(Icons.get("${ENTITYINFO.icon}"));
    }

    /**
     * Create the node icon combined with an error marker.
     *
     * @param icon the node icon image
     * @return the node icon image combined with error marker
     */
    private Image addErrorToIcon(Image icon) {
        return ImageUtilities.mergeImages(icon, SpecialIcons.get("errormarker"), 0, 6);
    }

    private class EntityStateChangeListener extends Listener {

        @Override
        public void action(Object p) {
            fireIconChange();
            fireOpenedIconChange();
            fireDisplayNameChange("old", "new");
            titlechange.fire(p);
        }
    }

    @Override
    public Action[] getActions(boolean context) {
        return new Action[]{
            Edit${ENTITYINFO.name}.get(Edit${ENTITYINFO.name}.class),
            Undo${ENTITYINFO.name}.get(Undo${ENTITYINFO.name}.class),
<#if haschildren>
            Add${child}.get(Add${child}.class),
            PasteAction.get(PasteAction.class),
</#if>
            CutAction.get(CutAction.class),
            CopyAction.get(CopyAction.class),
            DeleteAction.get(DeleteAction.class),
<#if ENTITYINFO.orderable = "yes" >
            MoveUpAction.get(MoveUpAction.class),
            MoveDownAction.get)MoveDownAction.class),
</#if>
        };
    }


    @Override
    public Action getPreferredAction() {
        return Edit${ENTITYINFO.name}.get(Edit${ENTITYINFO.name}.class);
    }

    @Override
    protected Sheet createSheet() {
        Sheet sheet = Sheet.createDefault();
        Sheet.Set set = Sheet.createPropertiesSet();
        ${ENTITYINFO.name} obj = getEntity();
        try {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden?? || field.type == "rootref" || field.type == "ref" || field.type == "reference" ) >
            Property ${field.name}Prop = new PropertySupport.Reflection(obj, ${field.javatype}.class, "${field.name}");
            ${field.name}Prop.setName("${field.name}");
            set.put(${field.name}Prop);
</#if>
</#list>
        } catch (NoSuchMethodException ex) {
            ErrorManager.getDefault();
        }
        sheet.put(set);
        return sheet;
    }

    @Override
    public final boolean canCopy() {
        return true;
    }

    @Override
    public final boolean canCut() {
        return true;
    }

    @Override
    public final boolean canDestroy() {
        return true;
    }

<#if haschildren>
    // DND target support
    @Override
    public PasteType getDropType(final Transferable t, int arg1, int arg2) {
        if (t.isDataFlavorSupported(${child?upper_case}NODE_FLAVOR)) {
            return new PasteType() {
                @Override
                public Transferable paste() throws IOException {
                    try {
                        factory.add((${child}) t.getTransferData(${child?upper_case}NODE_FLAVOR));
                        final Node node = NodeTransfer.node(t, NodeTransfer.DND_MOVE + NodeTransfer.CLIPBOARD_CUT);
                        if (node != null) {
                            node.destroy();
                        }
                    } catch (UnsupportedFlavorException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    return null;
                }
            };
        } else {
            return null;
        }
    }

    // CUT / COPY target support
    @Override
    protected void createPasteTypes(Transferable t, List<PasteType> s) {
        super.createPasteTypes(t, s);
        PasteType p = getDropType(t, 0, 0);
        if (p != null) {
            s.add(p);
        }
    }

</#if>
    @Override
    public Transferable clipboardCut() throws IOException {
        ExTransferable added = ExTransferable.create(super.clipboardCut());
        added.put(new ${ENTITYINFO.name}NodeTransfer());
        return added;
    }

    @Override
    public Transferable clipboardCopy() throws IOException {
        ExTransferable added = ExTransferable.create(super.clipboardCopy());
        added.put(new ${ENTITYINFO.name}NodeTransfer());
        return added;
    }

    private class ${ENTITYINFO.name}NodeTransfer extends ExTransferable.Single {

        public ${ENTITYINFO.name}NodeTransfer() {
            super(${ENTITYINFO.name?upper_case}NODE_FLAVOR);
        }

        @Override
        protected ${ENTITYINFO.name} getData() {
            return getEntity();
        }
    }

    @Override
    public final void destroy() throws IOException {
        getEntity().remove();
    }
}
 