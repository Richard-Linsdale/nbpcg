<#--
    Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Entity Editor class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#-- ============================================== -->
<#assign ENTITYINFO = entityinfo[useentityinfo] >
package ${package};

import com.famfamfam.www.silkicons.Icons;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.List;
import java.util.function.Supplier;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import org.openide.awt.StatusDisplayer;
import org.openide.nodes.NodeAdapter;
import org.openide.nodes.NodeEvent;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.util.WeakListeners;
import org.openide.windows.TopComponent;
import ${nodepackage}.${ENTITYINFO.name}Node;
import uk.theretiredprogrammer.nbpcglibrary.form.CompositePresenter;
import uk.theretiredprogrammer.nbpcglibrary.form.PanePresenter;

/**
 * Editor for ${ENTITYINFO.name}.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
@TopComponent.Description(preferredID = "${ENTITYINFO.name}Editor",
iconBase = "com/famfamfam/www/silkicons/${ENTITYINFO.icon}.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_${ENTITYINFO.name}Editor=${ENTITYINFO.name} Editor",
    "HINT_${ENTITYINFO.name}Editor=This is the ${ENTITYINFO.name} Editor"
})
public final class ${ENTITYINFO.name}Editor extends TopComponent implements PropertyChangeListener {
    
    private final CompositePresenter presenter;
    private boolean abandon = false;
    private final ${ENTITYINFO.name}Node node;
    private JComponent displaycomponent;
    private JToolBar toolbar;
    private NListener nodelistener;

    public ${ENTITYINFO.name}Editor(${ENTITYINFO.name}Node node) {
        setName(NbBundle.getMessage(${ENTITYINFO.name}Editor.class, "CTL_${ENTITYINFO.name}Editor"));
        setToolTipText(NbBundle.getMessage(${ENTITYINFO.name}Editor.class, "HINT_${ENTITYINFO.name}Editor"));
        this.node = node;
        presenter = new CompositePresenter();
        presenter.setGetChildPresentersFunction(() -> getPanePresenters());
    }

    private List<PanePresenter> getPanePresenters() {
        return Arrays.asList(
                         new ${ENTITYINFO.name}Presenter(node)
<#if ENTITYINFO.childnodesineditor??>
<#list ENTITYINFO.childnodesineditor?split(",") as childnode>
                        ,
                        new ${childnode}TablePresenter(node)
</#list>
</#if>
        );
    }

    /**
     * Open the Topcomponent and make it visible.
     */
    public void visible() {
        open();
        requestActive();
    }

    @Override
    public void componentOpened() {
        setLayout(new BorderLayout());
        toolbar = new JToolBar("editor toolbar");
        toolbar.add(new ToolbarButton("tick", "Test the data in this form", () -> testaction()));
        toolbar.add(new ToolbarButton("disk", "Save the data in this form", () -> saveaction()));
        add(toolbar, BorderLayout.PAGE_START);
        displaycomponent = presenter.getView();
        add(displaycomponent, BorderLayout.CENTER);
        presenter.enableView();
        setName("${ENTITYINFO.name}: " + node.getDisplayTitle());
        node.addPropertyChangeListener(WeakListeners.propertyChange(this, node));
        nodelistener = new NListener();
        node.addNodeListener(nodelistener);
    }

    public class NListener extends NodeAdapter {
        
        @Override
        public void nodeDestroyed(NodeEvent ev) {
            abandon = true;
            ${ENTITYINFO.name}Editor.this.close();
        }
    }

    public class ToolbarButton extends JButton implements ActionListener {

        private final Supplier<Boolean> actionfunction;

        @SuppressWarnings({"OverridableMethodCallInConstructor", "LeakingThisInConstructor"})
        public ToolbarButton(String imagename, String tooltip, Supplier<Boolean> actionfunction) {
            this.actionfunction = actionfunction;
            setToolTipText(tooltip);
            addActionListener(this);
            setIcon(new ImageIcon(Icons.get(imagename)));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            actionfunction.get();
        }
    }

    @Override
    public void componentClosed() {
        node.removeNodeListener(nodelistener);
        remove(displaycomponent);
        remove(toolbar);
        displaycomponent = null;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("DISPLAYTITLE".equals(evt.getPropertyName())) {
            setName("${ENTITYINFO.name}: " + node.getDisplayTitle());
        }
    }

    @Override
    public boolean canClose() {
        return abandon ? true : saveaction();
    }

    private boolean saveaction() {
        return testaction() && saveonlyaction();
    }

    private boolean testaction() {
        StringBuilder messages = new StringBuilder();
        boolean res = presenter.test(messages);
        if (!res) {
            StatusDisplayer.getDefault().setStatusText(messages.toString());
        }
        return res;
    }

    private boolean saveonlyaction() {
        StringBuilder messages = new StringBuilder();
        boolean res = presenter.save(messages);
        if (!res) {
            StatusDisplayer.getDefault().setStatusText(messages.toString());
        }
        return res;
    }
}