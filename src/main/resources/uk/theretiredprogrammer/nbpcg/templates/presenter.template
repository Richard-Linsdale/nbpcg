<#--
    Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for any Entity Prosenter class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#-- ============================================== -->
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign hasbigdecimal = false >
<#list ENTITYINFO.field![] as field>
<#if field.type = "currency" | field.type = "decimal" >
<#assign hasbigdecimal = true >
</#if>
</#list>
package ${package};

<#assign needListImport = "no" >
<#assign needArraysImport = "no" >
<#assign needDateOnlyImport = "no" >
<#assign needTimestampImport = "no" >
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type="date"  >
<#assign needDateOnlyImport = "yes" >
</#if>
<#if field.type="datetime"  >
<#assign needTimestampImport = "yes" >
</#if>
</#if>
</#list>
<#if hasbigdecimal>
import java.math.BigDecimal;
</#if>
import java.util.Arrays;
import java.util.List;
import java.util.function.Supplier;
import ${datapackage}.*;
import uk.theretiredprogrammer.nbpcglibrary.form.*;
import uk.theretiredprogrammer.nbpcglibrary.common.*;
<#if needDateOnlyImport = "yes">
import uk.theretiredprogrammer.nbpcglibrary.api.DateOnly;
</#if>
<#if needTimestampImport = "yes">
import uk.theretiredprogrammer.nbpcglibrary.api.Timestamp;
</#if>

/**
 * Presenter for ${ENTITYINFO.name} Entity Editor.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public final class ${ENTITYINFO.name}Presenter extends FormPresenter {
    
    private final ${ENTITYINFO.name} entity;
    private final FieldChangeListener entityfieldchangelistener;
  
    public ${ENTITYINFO.name}Presenter(${ENTITYINFO.name} entity) {
        this.entity = entity;
        setSaveFunction(sb -> this.entity.save(sb));
        setGetChildPresentersFunction(() -> getFieldPresenters());
        entityfieldchangelistener = new FieldChangeListener();
        entity.addFieldListener(entityfieldchangelistener);
    }

    private List<FieldPresenter> getFieldPresenters() {
        return Arrays.asList(
<#assign prefix= "">
<#list ENTITYINFO.field![] as field>
<#if field.useentryfield??>
<#list ENTITYINFO.entryfield![] as entryfield>
<#if entryfield.name == field.useentryfield>
<#if entryfield.type=="password">
            ${prefix}
            new FieldPresenter("${entryfield.label}",
                new LabelDecorator("${entryfield.label}", new ErrorMarkerDecorator(new PasswordField())),
                new ${entryfield.name?cap_first}FieldModel())
<#assign prefix = "," >
</#if>
</#if>
</#list>
<#else>
<#if field.type=="idx" >
<#elseif field.type=="password">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new PasswordField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type=="reference" || field.type == "enum">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new ChoiceField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type=="ref" || field.type = "rootref" >
<#else>
<#if !(field.hidden??) >
<#if field.type == "int">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new IntegerField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type == "long">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new LongField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type == "date">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new DateField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type == "datetime">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new DatetimeField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type == "currency" || field.type = "decimal" >
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new DecimalField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#elseif field.type == "boolean">
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new CheckboxField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#else>
<#if field.choicemethod?? >
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new ChoiceField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
<#else>
            ${prefix}
            new FieldPresenter("${field.label}",
                new LabelDecorator("${field.label}", new ErrorMarkerDecorator(new TextField())),
                new ${field.name?cap_first}FieldModel())
<#assign prefix = "," >
</#if>
</#if>
</#if>
</#if>
</#if>
</#list>
            ${prefix}
            new FieldPresenter(
                new ErrorMarkerDecorator(new NullField(2)),
                new ${ENTITYINFO.name}Model())
        );
    }

    private class ${ENTITYINFO.name}Model extends NullFieldModel {

        @Override
        public boolean test(StringBuilder sb) {
            return entity.getEntityRules().checkRules(sb);
        }
    }
<#list ENTITYINFO.field![] as field>
<#if field.useentryfield??>
<#list ENTITYINFO.entryfield![] as entryfield>
<#if entryfield.name == field.useentryfield>
<#if entryfield.type = "password" >

    private class ${entryfield.name?cap_first}FieldModel extends EntityFieldModel<String> {
    
        private final Rules rules;
        private String val = "";
        
        public ${entryfield.name?cap_first}FieldModel() {
            rules = new Rules();
            rules.addRules(entity.get${field.name?cap_first}Rules());
            rules.addRule(new LocalRule(()->val));
        }
        
        @Override
        public void set(String value) {
            val = value;
            entity.set${field.name?cap_first}(${entryfield.mapping}(value));
        }
        
        @Override
        public String get() {
            return val;
        }
        
        @Override
        public boolean test(StringBuilder sb) {
            return rules.checkRules(sb);
        }
        
        private class LocalRule extends Rule<String> {
            
            public LocalRule(Supplier<String> provider) {
                super(provider, "${entryfield.errormessage}");
            }
            
            @Override
            protected boolean ruleCheck(Supplier<String> provider) {
                return ${entryfield.rule}(provider.get());
            }
        }
    }
</#if>
</#if>
</#list>
<#else>
<#if field.type="reference">

    private class ${field.name?cap_first}FieldModel extends EntityChoiceFieldModel<${field.references}> {
    
        @Override
        public List<${field.references}> getChoices() {
            return ${field.references}.getAll${field.references}s();
        }

        @Override
        public void set(${field.references} value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public ${field.references} get() {
            return entity.get${field.name?cap_first}();
        }


        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
<#if field.optional??>

        @Override
        public boolean isNullSelectionAllowed() {
            return true;
        }
</#if>
    }
<#elseif field.type="ref"  >
<#elseif field.type="enum" >

    private class ${field.name?cap_first}FieldModel extends EntityChoiceFieldModel<String> {
    
        @Override
        public List<String> getChoices() {
            return Arrays.asList(${field.values?replace("'","\"")});
        }

        @Override
        public void set(String value) {
           entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
<#elseif field.type == "rootref" || field.type="idx" >
<#elseif field.type == "boolean" >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<Boolean> {
    
    @Override
        public void set(Boolean value) {
             entity.set${field.name?cap_first}(value);
        }

        @Override
        public Boolean get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
<#elseif field.type = "password" >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<String> {
    
        @Override
        public void set(String value) {
                entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
<#elseif field.type=="int" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<Integer> {
    
    @Override
        public void set(Integer value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public Integer get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
</#if>
<#elseif field.type=="long" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<Long> {
    
    @Override
        public void set(Long value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public Long get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
</#if>
<#elseif field.type == "date">
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<DateOnly> {
    
    @Override
        public void set(DateOnly value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public DateOnly get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
</#if>
<#elseif field.type == "datetime" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<Timestamp> {
    
    @Override
        public void set(Timestamp value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public Timestamp get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
</#if>
<#elseif field.type == "currency" || field.type = "decimal" >
<#if !(field.hidden??) >

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<BigDecimal> {
    
    @Override
        public void set(BigDecimal value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public BigDecimal get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
</#if>
<#else>
<#if !(field.hidden??) >
<#if field.choicemethod??>

    private class ${field.name?cap_first}FieldModel extends EntityChoiceFieldModel<String> {
    
        @Override
        public List<String> getChoices() {
            return ${field.choicemethod}();
        }

        @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }
<#if field.optional??>

        @Override
        public boolean isNullSelectionAllowed() {
            return true;
        }
</#if>
    }
<#else>

    private class ${field.name?cap_first}FieldModel extends EntityFieldModel<String> {
    
    @Override
        public void set(String value) {
            entity.set${field.name?cap_first}(value);
        }

        @Override
        public String get() {
            return entity.get${field.name?cap_first}();
        }

        @Override
        public boolean test(StringBuilder sb) {
            return entity.get${field.name?cap_first}Rules().checkRules(sb);
        }
    }
</#if>
</#if>
</#if>
</#if>
</#list>

    private class FieldChangeListener extends Listener {

        @Override
        public void action(Object p) {
            ${ENTITYINFO.name}Presenter.this.refreshView();
        }
    }
}