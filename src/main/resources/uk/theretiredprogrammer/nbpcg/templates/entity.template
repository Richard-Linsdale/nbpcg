<#--
    Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Entity class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign PARENTENTITYINFO = entityinfo[ENTITYINFO.parentname] >
<#assign hassortchildren = false >
<#list ENTITYINFO.child![] as child>
<#assign hassortchildren = hassortchildren | child.sort = "yes" >
</#list>
<#assign hasbigdecimal = false >
<#list ENTITYINFO.field![] as field>
<#if field.type = "currency" | field.type = "decimal" >
<#assign hasbigdecimal = true >
</#if>
</#list>
package ${package};

<#if hasbigdecimal>
import java.math.BigDecimal;
</#if>
import java.text.MessageFormat;
import java.text.ParseException;
<#if ENTITYINFO.parentname??>
import java.util.ArrayList;
</#if>
import java.util.Date;
<#if hassortchildren>
import java.util.Comparator;
</#if>
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import static ${package}.${ENTITYINFO.name}.${ENTITYINFO.name}Field;
import uk.theretiredprogrammer.nbpcglibrary.api.*;
import uk.theretiredprogrammer.nbpcglibrary.common.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entity.*;
<#if ENTITYINFO.orderable = "yes">
import uk.theretiredprogrammer.nbpcglibrary.data.entity.EntityStateChangeEventParams.EntityState;
import static uk.theretiredprogrammer.nbpcglibrary.data.entity.EntityStateChangeEventParams.EntityState.NEW;
import static uk.theretiredprogrammer.nbpcglibrary.data.entity.EntityStateChangeEventParams.EntityState.NEWEDITING;
</#if>
<#assign er_written = "n" >
<#list ENTITYINFO.field![] as field >
<#if (field.type = "reference" || field.type = "ref") && er_written = "n" >
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;
<#assign er_written = "y" >
</#if>
</#list>
<#if er_written = "n" && ENTITYINFO.child??>
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;
</#if>

/**
 * The ${ENTITYINFO.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
<#if ENTITYINFO.ordercolumn??>
public class ${ENTITYINFO.name} extends EntityIndexed<${ENTITYINFO.name}Entity,${ENTITYINFO.name},${ENTITYINFO.parentname}, ${ENTITYINFO.name}Field> {
<#else>
public class ${ENTITYINFO.name} extends Entity<${ENTITYINFO.name}Entity,${ENTITYINFO.name},${ENTITYINFO.parentname}, ${ENTITYINFO.name}Field> {
</#if>

    /**
     * the ${ENTITYINFO.name} field identifiers
     */
    public enum ${ENTITYINFO.name}Field {
<#list ENTITYINFO.field![] as field >
<#if field.type = "idx" >
        /**
         * the ${field.name} field
         */
        ${field.name?upper_case},
<#elseif field.type != "rootref" >
<#if !(field.hidden??) >
        /**
         * the ${field.name} field
         */
        ${field.name?upper_case},
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
        /**
         * the ${child.name}s collection
         */
        ${child.name?upper_case}S,
</#list>
    }

    private ${ENTITYINFO.name}Entity baseentity;
    private ${ENTITYINFO.name}Entity baseentityoriginal;
    private final Rules entityRules = new Rules();
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref">
    private final EntityReference<${field.references}, ${PARENTENTITYINFO.parentname}> ${field.name};
    private final Rules ${field.name}Rules = new Rules();
<#elseif field.type == "reference">
<#assign FIELDENTITY = entityinfo[field.references]>
    private final EntityReference<$${field.references}, ${FIELDENTITY.parentname}> ${field.name};
    private final Rules ${field.name}Rules = new Rules();
<#elseif field.type == "rootref" >
    private final ${field.references} ${field.name};
<#else>
<#if !field.hidden??>
    private final Rules ${field.name}Rules = new Rules();
</#if>
<#if field.type == "decimal" || field.type == "currency" >
<#if field.min??>
    private final BigDecimal ${field.name}decimalmin = new BigDecimal("${field.min}");
</#if>
<#if field.min??>
    private final BigDecimal ${field.name}decimalmax = new BigDecimal("${field.max}");
</#if>
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
<#assign CHILDENTITY = entityinfo[child.name?cap_first]>
<#if child.orderable = "yes">
    private final EntityIndexedReferenceFilterSet<${child.references}, ${ENTITYINFO.name}> ${child.name}s;
<#elseif child.sort = "yes" >
    private final EntitySortedReferenceFilterSet<${child.references}, ${ENTITYINFO.name}, ${child.references}.${child.references}Field> ${child.name}s;
<#else>
    private final EntityReferenceFilterSet<${child.references}, ${ENTITYINFO.name}> ${child.name}s;
</#if>
</#list>

    /**
     * Constructor - ${ENTITYINFO.name}.
     * @param basenetity the base entity for this Entity
     * @param em - the entity manager for this entity type
     */
    public ${ENTITYINFO.name}(${ENTITYINFO.name}Entity baseentity, ${ENTITYINFO.name}.EM em) {
        super("${ENTITYINFO.name}", "${ENTITYINFO.icon}", em, new ${ENTITYINFO.name}Rest("dummy jwtoken"));
        this.baseentity = baseentity;
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
<#assign needreflistener = "no">
<#list ENTITYINFO.displaynameformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign needreflistener  = "yes" >
</#if>
</#list>
</#list>
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign needreflistener = "yes" >
</#if>
</#list>
</#list>
</#if>
<#if needreflistener = "yes" >
        ${field.name} = new EntityReference<>("${ENTITYINFO.name}>${field.name?cap_first}", ${field.references}.getEM(), new ReferencedEntityTitleChangeListener("${ENTITYINFO.name}>${field.name?cap_first}"));
<#else>
        ${field.name} = new EntityReference<>("${ENTITYINFO.name}>${field.name?cap_first}", ${field.references}.getEM());
</#if>
<#if !field.optional??>
        addRule(${field.name}Rules, ${field.name}.getDefinedRule());
</#if>
<#elseif field.type == "rootref">
        root = ${field.references}.get();
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type = "String" >
        addRule(${field.name}Rules, new ${field.name?cap_first}MinRule());
        addRule(${field.name}Rules, new ${field.name?cap_first}MaxRule());
<#if field.unique??>
        addRule(${field.name}Rules, new ${field.name?cap_first}UniqueRule());
</#if>
<#elseif field.type = "int" || field.type = "long" || field.type = "currency" || field.type = "decimal" >
<#if field.min??>
        addRule(${field.name}Rules, new ${field.name?cap_first}MinRule());
</#if>
<#if field.max??>
        addRule(${field.name}Rules, new ${field.name?cap_first}MaxRule());
</#if>
<#elseif field.type = "date" || field.type = "datetime" >
<#if field.future??>
        addRule(${field.name}Rules, new ${field.name?cap_first}FutureRule());
</#if>
<#if field.past??>
        addRule(${field.name}Rules, new ${field.name?cap_first}PastRule());
</#if>
<#elseif field.type = "enum" >
        addRule(${field.name}Rules, new ${field.name?cap_first}EnumRule());
</#if>
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
<#if child.orderable = "yes" >
        ${child.name}s = new EntityIndexedReferenceFilterSet<>(instanceDescription()+">${child.references}s", "${child.dbname}", getId(), ${child.references}.EM.class);
<#elseif child.sort = "yes" >
        ${child.name}s = new EntitySortedReferenceFilterSet<>(instanceDescription()+">${child.references}s", new ${child.references}Comparator(), "${child.dbname}", getId(), ${child.references}.EM.class);
<#else>
        ${child.name}s = new EntityReferenceFilterSet<>(instanceDescription()+">${child.references}s", "${child.dbname}", getId(), ${child.references}.EM.class);
</#if>
         ${child.name}s.load();
<#if child.min??>
        addRule(${child.name}s.getMinRule(${child.min}));
</#if>
<#if child.max??>
        addRule(${child.name}s.getMaxRule(${child.max}));
</#if>
</#list>
<#if ENTITYINFO.rule??>
        addRule(entityRules, new ${ENTITYINFO.rule}(this));
</#if>
        checkRulesAtLoad(new StringBuilder());
    }

    @Override
    public ${ENTITYINFO.name}Entity getBaseEntity() {
        return baseentity;
    }
    
    @Override
    public void setBaseEntity(${ENTITYINFO.name}Entity baseentity){
        this.baseentity = baseentity;
    }
    
    @Override
    public boolean isPersistent() {
        return getPK() > 0;
    }

    @Override
    public final int getPK() {
        return getId();
    }

    /**
     * Get all rules for this entity
     * @return the set of rules
     */
    public final Rules getEntityRules() {
        return entityRules;
    }
<#assign writeDescription = "yes" >
<#list ENTITYINFO.field![] as field>
<#if writeDescription = "yes">
<#if  field.type = "String" || field.type = "enum" || field.type = "password">

    @Override
    public final String instanceDescription() {
        return "".equals(baseentity.get${field.name?cap_first}()) ?
                LogBuilder.instanceDescription(this, Integer.toString(getId())):
                LogBuilder.instanceDescription(this, Integer.toString(getId())+"-"+baseentity.get${field.name?cap_first}());
    }
<#assign writeDescription = "no" >
</#if>
<#if field.type = "boolean" || field.type = "int" || field.type = "long" || field.type = "date" || field.type = "datetime" || field.type = "decimal" || field.type = "currency" >
    
    @Override
    public final String instanceDescription() {
        return LogBuilder.instanceDescription(this, Integer.toString(getId()));
    }
<#assign writeDescription = "no" >
</#if>
<#if field.type = "reference">

    @Override
    public final String instanceDescription() {
        if (${field.name} == null) {
            return LogBuilder.instanceDescription(this, Integer.toString(getId()));
        }
        ${field.references} e = ${field.name}.getNoLoad();
        return e != null?
                LogBuilder.instanceDescription(this, Integer.toString(getId()) + ":" + e.instanceDescription()):
                LogBuilder.instanceDescription(this, Integer.toString(getId()));
    }
<#assign writeDescription = "no" >
</#if>
</#if>
</#list>

<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type = "String" || field.type = "password" >
    private class ${field.name?cap_first}MinRule extends Rule {

        public ${field.name?cap_first}MinRule() {
            super("Too short");
        }

        @Override
        public boolean ruleCheck() {
            return baseentity.get${field.name?cap_first}().length() >= ${field.min};
        }
    }

    private class ${field.name?cap_first}MaxRule extends Rule {

        public ${field.name?cap_first}MaxRule() {
            super("Too long");
        }

        @Override
        public boolean ruleCheck() {
            return baseentity.get${field.name?cap_first}().length() <= ${field.max};
        }
    }

    <#if field.unique?? >
        private class ${field.name?cap_first}UniqueRule extends UniqueRule {

            public ${field.name?cap_first}UniqueRule() {
                super("${field.name} is not unique");
            }

            @Override
            protected boolean ruleCheck() {
        <#list ENTITYINFO.field![] as pref>
        <#if pref.type="ref" || pref.type="rootref" >
                    return getParent().get${ENTITYINFO.name}s().stream().noneMatch((e) -> (e != ${ENTITYINFO.name}.this && e.get${field.name?cap_first}().equals(baseentity.get${field.name?cap_first}())));
        </#if>
        </#list>
            }
        }

    </#if>
<#elseif field.type = "int" || field.type = "long" >
    <#if field.min??>
        private class ${field.name?cap_first}MinRule extends Rule {

            public ${field.name?cap_first}MinRule() {
                super(Below minimum");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}() >= ${field.min};
            }
        }

    </#if>
    <#if field.max??>
        private class ${field.name?cap_first}MaxRule extends Rule {

            public ${field.name?cap_first}MaxRule() {
                super("Above maximum");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}() <= ${field.max};
            }
        }

    </#if>
<#elseif field.type = "decimal" || field.type = "currency" >
    <#if field.min??>
        private class ${field.name?cap_first}MinRule extends Rule {

            public ${field.name?cap_first}MinRule() {
                super("Below minimum");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}().compareTo(${field.name}decimalmin) != -1;
            }
        }

    </#if>
    <#if field.max??>
        private class ${field.name?cap_first}MaxRule extends Rule {

            public ${field.name?cap_first}MaxRule() {
                super("Above maximum");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}().compareTo(${field.name}decimalmax) != 1;
            }
        }

    </#if>
<#elseif field.type = "date" || field.type = "datetime" >
    <#if field.future??>
        private class ${field.name?cap_first}FutureRule extends Rule {

            public ${field.name?cap_first}FutureRule() {
                super("Not in the future");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}().compareTo() != -1;
            }
        }

    </#if>
    <#if field.past??>
        private class ${field.name?cap_first}PastRule extends Rule {

            public ${field.name?cap_first}PastRule() {
                super("Not in the past");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}().compareTo() != 1;
            }
        }

    </#if>
<#elseif field.type = "enum" >
        private class ${field.name?cap_first}EnumRule extends Rule {
        
            public ${field.name?cap_first}EnumRule() {
                super("Not defined");
            }

            @Override
            public boolean ruleCheck() {
                return baseentity.get${field.name?cap_first}()!= null && !get${field.name?cap_first}().equals("");
            }
        }

</#if>
</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if field.type = "ref" >

        /**
         * Get the ${field.name} field rules.
         *
         * @return the rules
         */
        public Rules get${field.name?cap_first}Rules() {
            return ${field.name}Rules;
        }

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} getParent() {
        return ${field.name}.get();
    }

    /**
     * Set the parent (${field.name?cap_first}) Entity associated with this entity.
     * Called from the parent entity as part of the add${ENTITYINFO.name} method
     *
     * @param e the parent ${field.name} entity
     */
    protected void linkToParent(${field.references} e) {
        ensureEditing();
        if (${field.name}.set(e) ) {
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
            fireNameAndOrTitleChangeOn${field.name?cap_first}();
        }
    <#if ENTITYINFO.dynamicicon??>
            setIcon(${ENTITYINFO.dynamicicon});
    </#if>
    }

    /**
     * Clear the parent (${field.name?cap_first}) Entity associated with this entity.
     * Called from the parent entity as part of the remove${ENTITYINFO.name} method
     */
    protected void unlinkFromParent() {
        ensureEditing();
        if (${field.name}.set() ) {
            fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
            fireNameAndOrTitleChangeOn${field.name?cap_first}();
        }
    }
<#elseif field.type = "reference" >

        /**
         * Get the ${field.name} field rules.
         *
         * @return the rules
         */
        public Rules get${field.name?cap_first}Rules() {
            return ${field.name}Rules;
        }

    /**
     * Get the ${field.name?cap_first} Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} get${field.name?cap_first}() {
        return ${field.name}.get();
    }

    /**
     * Set the ${field.name?cap_first} Entity associated with this entity.
     *
     * @param e the ${field.name} entity
     */
    public void set${field.name?cap_first}(${field.references} e) {
        if (e == null) {
            if (${field.name}.getPK() != null) {
                ensureEditing();
                if (${field.name}.set()) {
                    fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                    fireNameAndOrTitleChangeOn${field.name?cap_first}();
                }
            }
        } else {
            if (!e.getPK().equals(${field.name}.getPK())) {
                ensureEditing();
                if (${field.name}.set(e.getPK())) {
                    fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                    fireNameAndOrTitleChangeOn${field.name?cap_first}();
                }
            }
        }
    }
<#elseif field.type = "rootref" >

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} getParent() {
        return root;
    }
<#elseif field.type == "idx" >

    @Override
    public final int getIdx() {
        return idx;
    }

    @Override
    public void setIdx(int idx) {
        if (this.idx != idx) {
            ensureEditing();
            this.idx = idx;
            fireFieldChange(${ENTITYINFO.name}Field.IDX);
        }
    }

<#else>
    <#if !(field.hidden??) >

        /**
         * Get the ${field.name} field rules.
         *
         * @return the rules
         */
        public Rules get${field.name?cap_first}Rules() {
            return ${field.name}Rules;
        }
    </#if>

    /**
     * Get the ${field.name}.
     *
     * @return the ${field.name}
     */
    <#if field.type == "datetime">
        public final Date get${field.name?cap_first}() throws ParseException {
            return DATETIME_ISO8601.parse(baseentity.get${field.name?cap_first}());
        }
    <#else>
        public final ${field.javatype} get${field.name?cap_first}() {
            return baseentity.get${field.name?cap_first}();
        }
    </#if>
    <#if !(field.hidden??) >

        /**
         * Define the ${field.name?cap_first}.
         *
         * @param ${field.name} the ${field.name}
         */
        public void set${field.name?cap_first}(${field.javatype} ${field.name}) {
        <#if field.type == "enum" >
            if (${field.name} == null) {
                if (baseentity.get${field.name?cap_first}() != null) {
                    ensureEditing();
                    baseentity.set${field.name?cap_first}(null);
                    fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                    fireNameAndOrTitleChangeOn${field.name?cap_first}();
                }
            } else {
                if (!${field.name}.equals(baseentity.get${field.name?cap_first}())) {
                    ensureEditing();
                    baseentity.set${field.name?cap_first}(${field.name});
                    this.${field.name} = ${field.name};
                    fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                    fireNameAndOrTitleChangeOn${field.name?cap_first}();
                }
            }
        <#else>
            <#if field.type == "String" || field.type == "date" || field.type == "datetime">
                if (!baseentity.get${field.name?cap_first}().equals(${field.name})) {
            <#elseif field.type == "decimal" || field.type == "currency" >
                if (baseentity.get${field.name?cap_first}().compareTo(${field.name}) != 0) {
            <#else>
                if (baseentity.get${field.name?cap_first}() != ${field.name}) {
            </#if>
                ensureEditing();
                baseentity.set${field.name?cap_first}(${field.name});
                fireFieldChange(${ENTITYINFO.name}Field.${field.name?upper_case});
                fireNameAndOrTitleChangeOn${field.name?cap_first}();
            }
        </#if>
        }
    </#if>
</#if>
<#if !(field.hidden??) >
    private void fireNameAndOrTitleChangeOn${field.name?cap_first}() {
    <#assign namechange = "no">
    <#list ENTITYINFO.displaynameformat as df >
    <#list df.display as dp>
        <#if dp.field = field.label >
        <#assign namechange = "yes" >
        </#if>
    </#list>
    </#list>
    <#if namechange = "yes" >
            nameListenerFire();
    </#if>
    <#assign titlechange = "no">
    <#if ENTITYINFO.displaytitleformat??>
        <#list ENTITYINFO.displaytitleformat as df >
        <#list df.display as dp>
        <#if dp.field = field.label >
        <#assign titlechange = "yes" >
        </#if>
        </#list>
        </#list>
    <#else>
        <#assign titlechange = namechange >
    </#if>
    <#if titlechange = "yes" >
            titleListenerFire();
    </#if>
    }
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
    /**
     * Add a ${child.references} to this entity.
     *
     * @param e the ${child.name}
     */
    public void add${child.references}(${child.references} e) {
        e.linkToParent(this);
        ${child.name}s.add(e);
    }

    /**
     * Remove a ${child.references} from this entity.
     *
     * @param e the ${child.name}
     */
    public void remove${child.references}(${child.references} e) {
        e.unlinkFromParent();
        ${child.name}s.remove(e);
    }

    /**
     * Add set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void add${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.addSetListener(listener);
    }
    
    /**
     * remove set listener to ${child.name}s collections
     *
     * @param listener the set change listener to add
     */
    public void remove${child.references}SetChangeListener(Listener<SetChangeEventParams> listener) {
        ${child.name}s.removeSetListener(listener);
    }

    /**
     * Add set listener to all ${child.name}s (and parent) collections
     *
     * @param listener the set change listener to add
     */
    public static void add${child.references}sSetChangeListeners (Listener<SetChangeEventParams> listener) {
       ${ENTITYINFO.name}.getAll${ENTITYINFO.name}s().stream().forEach((${ENTITYINFO.name?lower_case}) -> {
            ((${ENTITYINFO.name})${ENTITYINFO.name?lower_case}).add${child.name?cap_first}SetChangeListener(listener);
        });
        ${ENTITYINFO.parentname}.add${ENTITYINFO.name}sSetChangeListeners(listener);
    }
    
    /**
     * Remove set listener from all ${child.name}s (and parent) collections
     *
     * @param listener the set change listener to remove
     */
    public static void remove${child.references}sSetChangeListeners(Listener<SetChangeEventParams> listener) {
        ${ENTITYINFO.name}.getAll${ENTITYINFO.name}s().stream().forEach((${ENTITYINFO.name?lower_case}) -> {
            ((${ENTITYINFO.name})${ENTITYINFO.name?lower_case}).remove${child.name?cap_first}SetChangeListener(listener);
        });
        ${ENTITYINFO.parentname}.remove${ENTITYINFO.name}sSetChangeListeners(listener);
    }

    /**
     * Get List of ${child.name}s associated with entity.
     *
     * @return list of ${child.name}s
     */
    public List<${child.references}> get${child.references}s() { 
        return ${child.name}s.get();
    }
<#if child.orderable = "yes">

    /**
     * Reorder the list of ${child.name}s associated with entity.
     *
     * @param perm the reordered index information
     * @param offsetMin the offset of the first element to be in the reordered section
     * @param offsetMax the offset of the last element to be in teh reordered section
     */
    public void reorder${child.references}s(int[] perm, int offsetMin, int offsetMax) {
        ${child.name}s.reorder(perm, offsetMin, offsetMax);
        ${child.name}s.persistReorder();
    }
</#if>
</#list>

    @Override
    protected final void entitySaveState() {
        baseentityoriginal = new ${ENTITYINFO.name}Entity(baseentity);
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
        ${field.name}.saveState();
</#if>
</#list>
        }

    @Override
    protected final void entityRestoreState() {
        baseentity = baseentityoriginal;
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference">
        ${field.name}.restoreState();
</#if>
</#list>
<#list ENTITYINFO.child![] as child>
        ${child.name}s.restoreState();
</#list>
    }

    @Override
    protected final void entityRemove(){
<#list ENTITYINFO.referenced![] as referenced>
        {
            ${referenced.name}.EM em = ${referenced.name}.getEM();
            em.getEntityPersistenceProvider().find("${referenced.field}", getPK()).stream().forEach((pk) -> {
<#if referenced.optional??>
                ${referenced.name} e = em.get(pk);
                e.set${referenced.field?cap_first}(null);
                e.save();
<#else>
                em.get(pk).remove();
</#if>
            });
        }
</#list>
<#list ENTITYINFO.child![] as child>
        get${child.references}s().stream().forEach((${child.name}) -> {
            ${child.name}.remove();
        });
</#list>
<#list ENTITYINFO.field as field>
<#if field.type = "ref"  || field.type = "rootref" >
        getParent().remove${ENTITYINFO.name}(this);
</#if>
</#list>
    }

    @Override
    protected final void entityCopy(${ENTITYINFO.name} from) {
        setBaseEntity( new ${ENTITYINFO.name}Entity(from.getBaseEntity()));
    }

    @Override
    protected final boolean entityDiffs(EntityFields data) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type == "ref" || field.type == "reference" >
        if (${field.name}.isDirty()) {
<#if field.optional??>
            Integer idrefpf = ${field.name}.getPK();
            if (idrefpf != null) {
                int idref${field.name?cap_first} = idrefpf;
                if (idref${field.name?cap_first} < 0 ) {
                    ${field.name}.get().save(new StringBuilder());
                    idref${field.name?cap_first} = ${field.name}.get().getPK();
                    if (idref${field.name?cap_first} < 0 ) {
                        return false;
                    }
                    data.put("${field.name}", idref${field.name?cap_first});
                } else if (idref${field.name?cap_first} == 0) {
                    data.put("${field.name}", null);
                } else {
                    data.put("${field.name}", idref${field.name?cap_first});
                }
            }
<#else>
            int idref${field.name?cap_first} = ${field.name}.getPK();
            if (idref${field.name?cap_first} < 0 ) {
                ${field.name}.get().save(new StringBuilder());
                idref${field.name?cap_first} = ${field.name}.get().getPK();
                if (idref${field.name?cap_first} < 0 ) {
                    return false;
                }
            }
</#if>
        }
</#if>
</#if>
</#list>
        return true;
    }

    @Override
    protected final boolean entityValues(EntityFields data) {
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
<#if field.type == "ref" || field.type == "reference" >
<#if field.optional??>
            Integer idrefpf = ${field.name}.getPK();
            if (idrefpf != null) {
                int idref${field.name?cap_first} = idrefpf;
                if (idref${field.name?cap_first} < 0 ) {
                    ${field.name}.get().save(new StringBuilder());
                    idref${field.name?cap_first} = ${field.name}.get().getPK();
                    if (idref${field.name?cap_first} < 0 ) {
                        return false;
                    }
                }
            }
<#else>
        int idref${field.name?cap_first} = ${field.name}.getPK();
        if (idref${field.name?cap_first} < 0 ) {
            ${field.name}.get().save(new StringBuilder());
            idref${field.name?cap_first} = ${field.name}.get().getPK();
            if (idref${field.name?cap_first} < 0 ) {
                return false;
            }
        }
</#if>
</#if>
</#if>
</#list>
        return true;
    }

<#if ENTITYINFO.orderable = "yes">
    @Override
    public final boolean save() {
        EntityState state = getState();
        if (state == NEW || state == NEWEDITING) {
            if (getIdx() == Integer.MAX_VALUE) {
                setIdx(epp.findNextIdx());
            }
        }
        return super.save();
    }

</#if>
    /**
     * Get the ${ENTITYINFO.name} Entity Manager
     * @return the ${ENTITYINFO.name} Entity Manager
     */
    public static ${ENTITYINFO.name}.EM getEM() {
        return Lookup.getDefault().lookup(${ENTITYINFO.name}.EM.class);
    }

    /**
     * The ${ENTITYINFO.name} Entity Manager
     */
    @ServiceProvider(service=${ENTITYINFO.name}.EM.class)
    public static class EM extends EntityManager<${ENTITYINFO.name},${ENTITYINFO.parentname}> {
   
        private static int tpk = -1;
        /**
         * Constructor.
         */
        public EM() {
            super("${ENTITYINFO.name}");
        }

        @Override
        protected final void link2parent(${ENTITYINFO.name} e, ${ENTITYINFO.parentname} parent) {
                parent.add${ENTITYINFO.name}(e);
        }
        
        @Override
        protected final ${ENTITYINFO.name} createNewEntity() {
            ${ENTITYINFO.name}Entity be = new ${ENTITYINFO.name}Entity();
            be.setId(tpk--);
            return new ${ENTITYINFO.name}(be, this);
        }

        @Override
        protected final ${ENTITYINFO.name} createNewEntity(int pk) {
            ${ENTITYINFO.name}Entity be = new ${ENTITYINFO.name}Entity();
            be.setId(pk);
            ${ENTITYINFO.name} e = new ${ENTITYINFO.name}(be,this);
            e.load(pk);
            return e;
        }

        @Override
        protected final EntityPersistenceProvider createEntityPersistenceProvider() {
            return EntityPersistenceProviderManager.getEntityPersistenceProvider("${ENTITYINFO.dbkey}", "${ENTITYINFO.dbtablename}"<#if ENTITYINFO.orderable = "yes">, "idx"</#if>);
        }

        @Override
        protected boolean isPersistent(int pkey) {
            return pkey > 0;
        }
    }
<#list ENTITYINFO.child![] as child>
<#if child.sort = "yes" >

    private class ${child.references}Comparator implements Comparator<${child.references}> {
        @Override
        public int compare(${child.references} o1, ${child.references} o2) {
            return o1.getSortKey().compareTo(o2.getSortKey());
        }
    }
</#if>
</#list>
    /**
     * Get the set of all ${ENTITYINFO.name}s.
     * 
     * @return the set of all ${ENTITYINFO.name}s
     */
    public static List<${ENTITYINFO.name}> getAll${ENTITYINFO.name}s() {
        List<${ENTITYINFO.name}> list = new ArrayList<>();
<#if PARENTENTITYINFO.parentname?? >
        ${ENTITYINFO.parentname}.getAll${ENTITYINFO.parentname}s().stream()
            .forEach(parent -> list.addAll(parent.get${ENTITYINFO.name}s()));
<#else>
        list.addAll(${ENTITYINFO.parentname}.get().get${ENTITYINFO.name}s());
</#if>
        return list;
    }

    @Override
    public String getDisplayName() {
<#list ENTITYINFO.displaynameformat as df >
        return MessageFormat.format("${df.format}", <#list df.display as dp>format${dp.field}()<#if dp_has_next>, </#if></#list>);
</#list>
    }

    @Override
    public String getDisplayTitle() {
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df>
        return MessageFormat.format("${df.format}", <#list df.display as dp>format${dp.field}()<#if dp_has_next>, </#if></#list>);
</#list>
<#else>
        return getDisplayName();
</#if>
    }

    @Override
    public String getSortKey() {
<#if ENTITYINFO.sortformat?? >
<#list ENTITYINFO.sortformat as df>
        return MessageFormat.format("${df.format}", <#list df.display as dp>format${dp.field}(<#if dp.length??>${dp.length}</#if>)<#if dp_has_next>, </#if></#list>);
</#list>
<#else>
        return getDisplayTitle();
</#if>
    }

<#list ENTITYINFO.field![] as field>
<#if field.type != "rootref" >
    /**
     * Get the formatted text version of ${field.name} field
     *
     * @return the formatted String 
     */
<#if field.type="reference" >
    public String format${field.name?cap_first}() {
        return get${field.name?cap_first}()!=null ? get${field.name?cap_first}().getDisplayTitle(): "undefined";
    }
<#elseif field.type="ref" >
    public String format${field.name?cap_first}() {
        return getParent()!=null ? getParent().getDisplayName(): "undefined" ;
    }
<#elseif field.type="int" >
    public String format${field.name?cap_first}() {
        return Integer.toString(get${field.name?cap_first}());
    }
<#elseif field.type="idx"  >
    public String format${field.name?cap_first}() {
        return Integer.toString(getIdx());
    }
<#elseif field.type="long" >
    public String format${field.name?cap_first}() {
        return Long.toString(get${field.name?cap_first}());
    }
<#elseif field.type="boolean" >
    public String format${field.name?cap_first}() {
        return get${field.name?cap_first}()? "Yes": "No";
    }
<#elseif field.type="date">
    public String format${field.name?cap_first}() throws ParseException {
        return DATEONLY_READABLE.format(get${field.name?cap_first}());
    }
<#elseif field.type="datetime" >
    public String format${field.name?cap_first}() throws ParseException {
        return DATETIME_READABLE.format(get${field.name?cap_first}());
    }
<#elseif field.type="currency" || field.type="decimal" >
    public String format${field.name?cap_first}() {
        return get${field.name?cap_first}().toPlainString();
    }
<#elseif field.type="String" ||  field.type="enum" || field.type="password" >
    public String format${field.name?cap_first}() {
        return get${field.name?cap_first}();
    }
</#if>

</#if>
</#list>
<#list ENTITYINFO.field![] as field>
<#if field.type="int" >
    /**
     * Get the formatted text version of ${field.name} field left padded with
     * zeros if less than minimum size.
     *
     * @param minDigits minimum size
     * @return the formatted String
     */
    public String format${field.name?cap_first}(int minDigits) {
        return StringX.padLeft(format${field.name?cap_first}(),minDigits,'0');
    }
<#elseif field.type="String" >
    /**
     * Get the formatted text version of ${field.name} field left padded with
     * zeros if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String format${field.name?cap_first}(int minChars) {
        return StringX.padLeftIfInt(format${field.name?cap_first}(),minChars,'0');
    }
</#if>
</#list>
<#assign fireName = "no">
<#assign fireTitle = "no">
<#list ENTITYINFO.field![] as field>
<#if field.type == "ref" || field.type == "reference" >
<#list ENTITYINFO.displaynameformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign fireName  = "yes" >
</#if>
</#list>
</#list>
<#if ENTITYINFO.displaytitleformat??>
<#list ENTITYINFO.displaytitleformat as df >
<#list df.display as dp>
<#if dp.field = field.label >
<#assign fireTitle = "yes" >
</#if>
</#list>
</#list>
<#else>
<#assign fireTitle = fireName >
</#if>
</#if>
</#list>
<#if fireName = "yes" || fireTitle = "yes" >

    private class ReferencedEntityTitleChangeListener extends Listener<SimpleEventParams> {

        public  ReferencedEntityTitleChangeListener(String name) {
            super(name);
        }

        @Override
        public void action(SimpleEventParams p) {
<#if fireName = "yes" >
            nameListenerFire();
</#if>
<#if fireTitle = "yes" >
            titleListenerFire();
</#if>
        }
    }
</#if>
}