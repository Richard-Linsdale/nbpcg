<#--
    Copyright 2017-2018 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Entity class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign require_bigdecimal = "no">
<#list ENTITYINFO.field![] as field>
<#if field.javatype = "BigDecimal" >
<#assign require_bigdecimal = "yes" >
</#if>
</#list>
package ${package};

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.StringReader;
<#if require_bigdecimal = "yes">
import java.math.BigDecimal;
</#if>
import java.text.MessageFormat;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonReader;
import uk.theretiredprogrammer.nbpcglibrary.api.IdTimestamp;

/**
 * The ${ENTITYINFO.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name} extends IdTimestamp {

    private final List listeners = Collections.synchronizedList(new LinkedList());
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
    private ${field.javatype} ${field.name}${field.initialisation};
</#if>
</#list>

    public ${ENTITYINFO.name}() {
        super();
    }

public ${ENTITYINFO.name}(String json) {
        JsonObject jobj;
        try (JsonReader jsonReader = Json.createReader(new StringReader(json))) {
            jobj = jsonReader.readObject();
        }
        insertValues(jobj);
    }
    
    public ${ENTITYINFO.name}(JsonObject jobj){
        insertValues(jobj);
    }
        
    private void insertValues(JsonObject jobj) {
        this.insertIdTimestamp(jobj);
<#list ENTITYINFO.field![] as fd>
<#if ! (fd.hidden??) >
        ${fd.name} = jobj.${fd.jsontype};
</#if>
</#list>
    }

    public ${ENTITYINFO.name}(boolean dirtystate, ${ENTITYINFO.name} from) {
        copy(dirtystate, from);
        setId(0);
    }

    public ${ENTITYINFO.name}(${ENTITYINFO.name} from) {
        copy(from);
    }

    public final void copy(${ENTITYINFO.name} from) {
        copy(false, from);
    }

    public final void copy(boolean dirtystate, ${ENTITYINFO.name} from) {
        super.copy(dirtystate, from);
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >
        ${field.name} = from.${field.name};
</#if>
</#list>
    }

    /**
     * Add a property change listener to this entity
     *
     * @param pcl the listener to be added
     */
    public void addPropertyChangeListener(PropertyChangeListener pcl) {
        listeners.add(pcl);
    }
    
    /**
     * Remove a property change listener from this entity
     *
     * @param pcl the listener to be removed
     */
    public void removePropertyChangeListener(PropertyChangeListener pcl) {
        listeners.remove(pcl);
    }
    
    private void fire(String propertyName, Object old, Object nue) {
        //Passing 0 below on purpose, so you only synchronize for one atomic call:
        PropertyChangeListener[] pcls = (PropertyChangeListener[]) listeners.toArray(new PropertyChangeListener[0]);
        for (PropertyChangeListener pcl : pcls) {
            pcl.propertyChange(new PropertyChangeEvent(this, propertyName, old, nue));
        }
    }
    
<#list ENTITYINFO.field![] as field>
<#if !(field.hidden??) >

    /**
     * Get the ${field.name}.
     *
     * @return the ${field.name}
     */
    public final ${field.javatype} get${field.name?cap_first}() {
        return ${field.name};
    }
    
    /**
     * Define the ${field.name?cap_first}.
     *
     * @param ${field.name} the ${field.name}
     */
    public final void set${field.name?cap_first}(${field.javatype} ${field.name}) {
        this.${field.name} = ${field.name};
        fire("${field.name}", null, ${field.name});
    }
</#if>
</#list>

   @Override
    public String toString() {
<#list ENTITYINFO.tostring as df >
        return MessageFormat.format("${df.format}", 
<#list df.display as dp>
<#list ENTITYINFO.field![] as fd>
<#if fd.name == dp.field >
            get${fd.name?cap_first}()<#if dp_has_next>, </#if>
</#if>
</#list>
</#list>
                    );
</#list>
    }

    @Override
    public JsonObject toJsonObject() {
        JsonObjectBuilder job = Json.createObjectBuilder();
        addIdTimestamp(job);
        return job
<#list ENTITYINFO.field![] as fd>
<#if ! (fd.hidden??) >
                .add("${fd.name}",${fd.name})
</#if>
</#list>
                .build();
    }
}