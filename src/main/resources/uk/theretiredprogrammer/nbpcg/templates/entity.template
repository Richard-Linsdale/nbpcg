<#--
    Copyright 2015-2017 Richard Linsdale.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 -->
<#if license = "apache20" >
/*
 * Copyright ${copyright}.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</#if>
<#if license = "gpl30" >
/*
 * Copyright (C) ${copyright}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
</#if>
<#if license = "lgpl21" >
/*
 * Copyright (C) ${copyright}
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
</#if>
<#-- Freemarker Template for Entity class -->
<#assign templateauthor = "Richard Linsdale (richard at theretiredprogrammer.uk)" />
<#assign ENTITYINFO = entityinfo[useentityinfo] >
<#assign PARENTENTITYINFO = entityinfo[ENTITYINFO.parentname] >
<#assign hassortchildren = false >
<#list ENTITYINFO.child![] as child>
<#assign hassortchildren = hassortchildren | child.sort = "yes" >
</#list>
<#assign hasbigdecimal = false >
<#list ENTITYINFO.field![] as field>
<#if field.type = "currency" | field.type = "decimal" >
<#assign hasbigdecimal = true >
</#if>
</#list>
package ${package};

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
<#if hasbigdecimal>
import java.math.BigDecimal;
</#if>
import java.util.Collections;
<#if hassortchildren>
import java.util.Comparator;
</#if>
import java.util.LinkedList;
import java.util.List;

/**
 * The ${ENTITYINFO.name} Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using ${DEFINITION_FILE}.  
 * Do not edit this file.  Apply any changes to the definition file and regenerate all files.)
 *
 * @author ${templateauthor}
 */
public class ${ENTITYINFO.name} {

    private ${ENTITYINFO.name}Entity baseentity;
    private final List listeners = Collections.synchronizedList(new LinkedList());

    /**
     * Constructor - ${ENTITYINFO.name}.
     */
    public ${ENTITYINFO.name}() {
        this(new ${ENTITYINFO.name}Entity());
    }

    /**
     * Constructor - ${ENTITYINFO.name}.
     * @param baseentity the base entity for this Entity
     */
    public ${ENTITYINFO.name}(${ENTITYINFO.name}Entity baseentity) {
        this.baseentity = baseentity;
        ${ENTITYINFO.name}Rules.areAllRulesExceptUniqueValid(new StringBuilder(), baseentity);
    }

    public ${ENTITYINFO.name}Entity getBaseEntity() {
        return baseentity;
    }
    
    public void setBaseEntity(${ENTITYINFO.name}Entity baseentity){
        this.baseentity = baseentity;
    }
    
    public void addPropertyChangeListener(PropertyChangeListener pcl) {
        listeners.add(pcl);
    }

    public void removePropertyChangeListener(PropertyChangeListener pcl) {
        listeners.remove(pcl);
    }

    private void fire(String propertyName, Object old, Object nue) {
        //Passing 0 below on purpose, so you only synchronize for one atomic call:
        PropertyChangeListener[] pcls = (PropertyChangeListener[]) listeners.toArray(new PropertyChangeListener[0]);
        for (PropertyChangeListener pcl : pcls) {
            pcl.propertyChange(new PropertyChangeEvent(this, propertyName, old, nue));
        }
    }

    public boolean isPersistent() {
        return getId() > 0;
    }

<#list ENTITYINFO.field![] as field>
<#if field.type = "ref" >

        /**
         * Get the ${field.name}.
         *
         * @return the ${field.name}
         */
        public final int get${field.name?cap_first}() {
            return baseentity.get${field.name?cap_first}();
        }

        /**
         * Define the ${field.name?cap_first}.
         *
         * @param ${field.name} the ${field.name}
         */
        public void set${field.name?cap_first}(int ${field.name}) {
            baseentity.set${field.name?cap_first}(${field.name});
            fire("${field.name}",  null, ${field.name});
        }
<#elseif field.type = "reference" >

    /**
     * Get the ${field.name?cap_first} Entity associated with this entity.
     *
     * @return the ${field.name?cap_first} entity
     */
    public ${field.references} get${field.name?cap_first}() {
        return ${field.name}.get();
    }

    /**
     * Set the ${field.name?cap_first} Entity associated with this entity.
     *
     * @param e the ${field.name} entity
     */
    public void set${field.name?cap_first}(${field.references} e) {
        if (e == null) {
            if (${field.name}.getPK() != null) {
                if (${field.name}.set()) {
                    fireFieldChange("${field.name}");
                }
            }
        } else {
            if (!e.getPK().equals(${field.name}.getPK())) {
                if (${field.name}.set(e.getPK())) {
                    fireFieldChange("${field.name}");
                }
            }
        }
    }
<#elseif field.type = "rootref" >
<#elseif field.type == "idx" >

    @Override
    public final int getIdx() {
        return idx;
    }

    @Override
    public void setIdx(int idx) {
        baseentity.setIdx(idx);
        fire("${field.name}", null,idx);
    }

<#else>
    <#if field.type == "datetime">
    /**
     * Get the ${field.name}.
     *
     * @return the ${field.name}
     */
        public final String get${field.name?cap_first}() {
            return baseentity.get${field.name?cap_first}();
        }
    <#else>
    /**
     * Get the ${field.name}.
     *
     * @return the ${field.name}
     */
        public final ${field.javatype} get${field.name?cap_first}() {
            return baseentity.get${field.name?cap_first}();
        }
    </#if>
    <#if !(field.hidden??) >

        /**
         * Define the ${field.name?cap_first}.
         *
         * @param ${field.name} the ${field.name}
         */
        public void set${field.name?cap_first}(${field.javatype} ${field.name}) {
        <#if field.type == "enum" >
            if (${field.name} == null) {
                if (baseentity.get${field.name?cap_first}() != null) {
                    baseentity.set${field.name?cap_first}(null);
                    fire("${field.name}");
                }
            } else {
                if (!${field.name}.equals(baseentity.get${field.name?cap_first}())) {
                    baseentity.set${field.name?cap_first}(${field.name});
                    this.${field.name} = ${field.name};
                    fire("${field.name}");
                }
            }
        <#else>
            baseentity.set${field.name?cap_first}(${field.name});
            fire("${field.name}", null, ${field.name});
        </#if>
        }
    </#if>
</#if>
</#list>
}